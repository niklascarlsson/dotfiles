#+TITLE: dotfiles
* Desktop environment
** X server

[[https://wiki.archlinux.org/index.php/xorg][Xorg in ArchWiki]]
#+BEGIN_QUOTE
Xorg (commonly referred as simply X) is the most popular display server among
Linux users. Its ubiquity has led to making it an ever-present requisite for GUI
applications, resulting in massive adoption from most distributions.
#+END_QUOTE

*** Xinitrc
:PROPERTIES:
:header-args: :tangle no :shebang "#! /bin/sh" :mkdirp yes
:END:

If my os doesn't have a display manager I will utilize this setup. Hence I let
the ~xinitrc~ be the configuration file where I specify the settings and
programs to launch upon startup. Currently assumes that if ~lightdm~ exists that
it is enabled and properly configured. ~xinitrc~ will then not tangle but
instead ~xprofile~ will, and vice versa.

**** Load xresources

Loading the Xresources file which contains the configuration parameters for some
X client applications like the terminal emulator ~urxvt~.
#+BEGIN_SRC sh
# customize xresources
[[ -f ~/.Xresources ]] && xrdb -merge ~/.Xresources
# set wallpaper
[[ -e ~/wallpaper ]] && feh --no-fehbg --image-bg black --bg-center ~/wallpaper
#+END_SRC

**** DONE HIDPI screen support
CLOSED: [2019-06-07 Fri 17:32]

I found an example configuration for the retina display at [[https://ellipticaldoor.com/2017-10-11-installing-arch-linux-on-a-macbook-with-retina-hidpi-support-and-graphic-switching/][Install Arch Linux
with Retina support]] Currently I have commented out the gdk and qt settings until
I read up on what they actually does. The xrandr command however I needed
because by default the output of the ~xrandr -q~ said the dpi was 96 which was
clearly incorrect. I verified that the 227 was correct by consulting the apple
website for the macbook specs.

Some more information on the matter:
https://wiki.archlinux.org/index.php/HiDPI#GDK_3_(GTK+_3)

#+BEGIN_SRC sh
# hidpi settings
export GDK_SCALE=2
export GDK_DPI_SCALE=0.5
#export QT_SCREEN_SCALE_FACTORS=0.9
#export QT_AUTO_SCREEN_SCALE_FACTOR=2
#export QT_SCALE_FACTOR=2

#+END_SRC

Previously I scaled up the non hidpi external monitor. A better approach was
what was suggested at the [[https://wiki.archlinux.org/index.php/HiDPI#Multiple_external_monitors][arch wiki]], namely scale down the hidpi screen. Since
this only applies when I have the computer connected to the external monitor I
am not using the built in screen primarly so scaling it down should be a better
strategy.

#+BEGIN_SRC sh
# Setup screen scaling/resolutions
if [ "$(xrandr -q | grep ' connected' -c)" -eq "1" ]; then
    xrandr --output eDP-1 --dpi 227
else
    xrandr --output eDP-1 --dpi 227 --scale 0.75x0.75
    xrandr --output DP-2 --right-of eDP-1 --auto
fi
#+END_SRC

**** Keyboard settings

These are the settings for the keyboard.
#+BEGIN_SRC sh
# keyboard settings
setxkbmap -layout us,se -option grp:shifts_toggle,ctrl:nocaps
#+END_SRC

I learnt about the ~setxkbmap~ at the [[https://wiki.archlinux.org/index.php/Xorg/Keyboard_configuration#Using_setxkbmap][arch wiki]], where else. Let's break down
the line. The ~layout~ specifies ~American~ and ~Swedish~ layouts. One can
switch between these two keyboard layouts by pressing both ~shifts~ at
time. Last I swap ctrl to caps and remove capslock.

**** Launch programs

I need to launch sxhkd since bspwm is relying upon that program to handle the
keybindings. I launch the terminal as well at startup. It can be convinent at
times when I hadn't installed rofi. Can probably be removed now.

#+BEGIN_SRC sh
# start programs
sxhkd &
urxvt &
# redshift &
compton &
exec bspwm
#+END_SRC

*** Xresources
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.Xresources") :mkdirp yes :padline no
:END:

[[https://wiki.archlinux.org/index.php/x_resources#Usage][Xresources in ArchWiki]]
#+BEGIN_QUOTE
Xresources is a user-level configuration dotfile, typically located at
~/.Xresources. It can be used to set X resources, which are configuration
parameters for X client applications.
#+END_QUOTE

**** TODO HIDPI

The configuration of hidpi parameters originate from the blogpost
[[https://ellipticaldoor.com/2017-10-11-installing-arch-linux-on-a-macbook-with-retina-hidpi-support-and-graphic-switching/][installing-arch-linux-on-a-macbook-with-retina-hidpi]], but the [[https://wiki.archlinux.org/index.php/HiDPI#X_Resources][ArchWiki]] also has
some hints for what to configure these values to.

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
!!
!! hidpi settings
Xft.dpi: 227
Xft.rgba: rgb
Xft.antialias: true
Xft.hinting: false
Xft.lcdfilter: lcddefault
#+END_SRC

**** TODO Colors

The colors originate from ~hlissners~ dotfiles setup. Another source for color
schemes might be

I found these colors in [[https://github.com/hlissner/dotfiles/blob/master/base/arch-desktop/Xresources][hlissner/dotfiles]], and thought they would make a good
start. For changes in the future the [[https://terminal.sexy/][terminal.sexy]] has some color schemes that
can be directly exported to Xresources format.
#+BEGIN_SRC sh :padline yes
!!
!! Colors
#define blk  #141517
#define bblk #969896
#define red  #cc6666
#define bred #de935f
#define grn  #b5bd68
#define bgrn #757d28
#define ylw  #f0c674
#define bylw #f9a03f
#define blu  #81a2be
#define bblu #2a8fed
#define mag  #b294bb
#define bmag #bc77a8
#define cyn  #8abeb7
#define bcyn #a3685a
#define wht  #c5c8c6
#define bwht #ffffff
#define bg blk
#define fg wht

,*.foreground:  fg
,*.background:  bg
,*.cursorColor: mag

! color[n]
,*.color0:  blk
,*.color8:  bblk
,*.color1:  red
,*.color9:  bred
,*.color2:  grn
,*.color10: bgrn
,*.color3:  ylw
,*.color11: bylw
,*.color4:  blu
,*.color12: bblu
,*.color5:  mag
,*.color13: bmag
,*.color6:  cyn
,*.color14: bcyn
,*.color7:  wht
,*.color15: bwht

! greys
,*.color234: #1d2021
,*.color235: #282828
,*.color236: #32302f
,*.color237: #3c3836
,*.color239: #504945
,*.color240: #544c49
,*.color241: #665c54
#+END_SRC

**** Cursor

Tweak the looks of the cursor.

#+BEGIN_SRC sh :padline yes
!!
!! Cursor
Xcursor.theme: default
Xcursor.size: 32
#+END_SRC

**** urxvt

#+BEGIN_SRC sh :padline yes
!!
!! Terminal
URxvt*.background:             [96]blk
URxvt*.termName:               xterm-256color
URxvt*.geometry:               81x20
URxvt*.buffered:               true
URxvt*.cursorBlink:            true
URxvt*.underlineColor:         grey
URxvt*.depth:                  32
URxvt*.borderless:             1
URxvt.iso14755:                false
URxvt.iso14755_52:             false
URxvt*.internalBorder:         14
URxvt*.scrollBar:              false
URxvt*.saveLines:              5000
URxvt*.loginShell:             false
URxvt*.matcher.button:         1
URxvt*.matcher.rend.0:         Uline Bold fg5
URxvt*.url-launcher:           firefox
URxvt*.lineSpace:              0
URxvt*.letterSpace:            0
#+END_SRC

**** Fonts

Choosing fonts are never easy. These are my current setup.

~Arch~
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
!!
!! Fonts
URxvt.font: xft:Iosevka Term:style=regular:size=6
URxvt.boldFont: xft:Iosevka Term:style=bold:size=6
#+END_SRC

~Ubuntu~
#+BEGIN_SRC sh :tangle (my/tangle-system '(work)) :padline yes
!!
!! Fonts
#+END_SRC

#+BEGIN_SRC sh :tangle no
!URxvt.font: xft:Roboto Mono:style=regular:size=12
!URxvt.boldFont: xft:Roboto Mono:style=bold:size=12
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
URxvt.font: xft:Iosevka Term:style=Regular:size=14
URxvt.boldFont: xft:Iosevka Term:style=Bold:size=14
#+END_SRC

*** Xprofile
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.xprofile") :mkdirp yes :padline no
:END:

**** About

In the [[https://wiki.archlinux.org/index.php/xprofile][ArchWiki]] this is said about the ~xprofile~.
#+BEGIN_QUOTE
An xprofile file, ~/.xprofile and /etc/xprofile, allows you to execute commands
at the beginning of the X user session - before the window manager is started.
#+END_QUOTE

When configuring ~bspwm~ for ~Ubuntu~ the [[https://github.com/windelicato/dotfiles/wiki/bspwm-for-dummies][bspwm-for-dummies]] guide explicitly
said that if you have a display manager, like the one in Ubuntu, then you
shouldn't use the ~xinitrc~. So instead I am using the ~xprofile~ to configure
what applications and settings to configure upon startup.

**** hidpi and non-hidpi solution

This is my hacky solution for dealing with hidpi and non-hidpi screen mix. If
only the internal screen is used I use sed commands to adjust dpi/font settings
to hidpi mode.

If the external monitor is connected I however downscale the internal one and
use sed commands to set non hidpi dpi/font settings.

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
#
# hidpi hack
if [ "$(bspc query -M | wc -l)" -eq "1" ]; then
    # no external monitor connected, adjust to hidpi settings
    sed -i '/font-[[:digit:]]./ {s/size=[[:digit:]]\+/size=8/; }' ~/.config/polybar/config
    sed -i '/dpi-./ {s/[[:digit:]]\+/227/; }' ~/.config/polybar/config
    sed -i '/Xft.dpi:./ {s/[[:digit:]]\+/227/; }' ~/.Xresources
    sed -i '/URxvt*.\+ont./ {s/[[:digit:]]\+/8/; }' ~/.Xresources
    sed -i '/rofi.font./ {s/[[:digit:]]\+/8/; }' ~/.config/rofi/config
    sed -i '/layout.css.devPixelsPerPx./ {s/[[:digit:]]*\.[[:digit:]]/1.5/; }' /home/niklascarlsson/.mozilla/firefox/eeakdoa8.default'/prefs.js'

    # hidpi settings
    export GDK_SCALE=1.5
    export GDK_DPI_SCALE=0.5
    export QT_SCREEN_SCALE_FACTORS=0.9
    export QT_AUTO_SCREEN_SCALE_FACTOR=2
    export QT_SCALE_FACTOR=2

    xrandr --output eDP-1 --dpi 227
else
    # external monitor connected, adjust to non hidpi settings
    sed -i '/font-[[:digit:]]./ {s/size=[[:digit:]]\+/size=10/; }' ~/.config/polybar/config
    sed -i '/dpi-./ {s/[[:digit:]]\+/96/; }' ~/.config/polybar/config
    sed -i '/Xft.dpi:./ {s/[[:digit:]]\+/96/; }' ~/.Xresources
    sed -i '/URxvt*.\+ont./ {s/[[:digit:]]\+/10/; }' ~/.Xresources
    sed -i '/rofi.font./ {s/[[:digit:]]\+/10/; }' ~/.config/rofi/config
    sed -i '/layout.css.devPixelsPerPx./ {s/[[:digit:]]*\.[[:digit:]]/1/; }' /home/niklascarlsson/.mozilla/firefox/eeakdoa8.default'/prefs.js'

    xrandr --output eDP-1 --dpi 227 --scale 0.75x0.75
    xrandr --output DP-2 --right-of eDP-1 --auto
fi
#+END_SRC

**** Xresources

Merge my ~Xresources~ settings with already existing ones.
#+BEGIN_SRC sh :padline yes
#
# Define the looks
[[ -f ~/.Xresources ]] && xrdb -merge ~/.Xresources
#+END_SRC

**** Wallpaper

Use ~feh~ to set the background for the desktop.
#+BEGIN_SRC sh
[[ -e ~/wallpaper ]] && feh --no-fehbg --image-bg black --bg-center ~/wallpaper
#+END_SRC

**** TODO Keyboard

I want to have a smarter solution in place here. Maybe one that utilizes udev
rules to set this automatically depending on wether I have a specific external
keyboard in use.

Essentially this is only valuable when I run on my Ubuntu computer or having a
non keyboardio external keyboard attached to the computer.

Set the keyboard mapping. I enable ~Swedish~ and ~English~ and switch languages
by pressing both of the ~shift~ keys.

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch work)) :padline yes
# set keyboardio layout
"$HOME/bin/set-keymap"
#+END_SRC

**** Programs

Launch the hotkey daemon.
#+BEGIN_SRC sh :padline yes
#
# Launch programs
sxhkd &
#+END_SRC

Launch the compositor compton to enable semi-trasparency.
#+BEGIN_SRC sh
compton &
#+END_SRC

Launch keyboard/mouserelated programs.
#+BEGIN_SRC sh
xcape &
unclutter &
#+END_SRC
*** Profile
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.profile") :mkdirp yes
:END:

In the [[https://wiki.archlinux.org/index.php/bspwm][configuration section for bspwm in the ArchWiki]] it is stated that:
#+BEGIN_EXAMPLE
Important: Make sure your environment variable $XDG_CONFIG_HOME is set or your
bspwmrc will not be found
#+END_EXAMPLE

It's therefore important to set this environmental variable, which I do in
~profile~.
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
XDG_CONFIG_HOME="$HOME/.config"
export XDG_CONFIG_HOME
#+END_SRC

** Window manager

[[https://github.com/baskerville/bspwm][bspwm, a tiling window manager]]. The ~bspwm~ window manager relies upon
[[https://github.com/baskerville/sxhkd][sxhkd, an X daemon]] which is where the keybindings are specified.

*** bspwm
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/bspwm/bspwmrc") :shebang "#!/usr/bin/env zsh" :mkdirp yes :padline no
:END:

**** Monitors and desktops
***** Define the primary monitor

I will start by setting up the correct monitor to be primary using ~randr~. The
benefit of that is that I later can just refer to the primary monitor, for
example to only put the polybar on the primary. Or use other type of bars for
the ones that ain't primary.

First step is to define the name of the primary. If there are no screens
connected then the internal screen will automatically be set to primary which
means that I don't need to do antyhing more.


This is my primary monitor for my ~ubuntu~ setup
#+BEGIN_SRC sh :tangle (my/tangle-system '(work)) :padline yes
#
## Monitor setup
EXTERNAL_MONITOR="DP-1-1-8"
#+END_SRC

This is my primary monitor for my ~arch~ setup
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch)) :padline yes
#
## Monitor setup
EXTERNAL_MONITOR="DP-2"
#+END_SRC

***** Setup the screen layout

Setup for external monitors. I found inspiration on how to find out wether the
external monitor is among the items in the list [[https://stackoverflow.com/questions/8063228/how-do-i-check-if-a-variable-exists-in-a-list-in-bash][here]]
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
MONITORS=$(xrandr -q | grep ' connected' | cut -d' ' -f1)
if [ -n "`echo $MONITORS | xargs -n1 echo | grep -e \"^$EXTERNAL_MONITOR$\"`" ]; then
    # if external monitor is connected set it to primary
    xrandr --output $EXTERNAL_MONITOR --primary
fi
#+END_SRC

This is the more hardcoded setup for my work station
#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
MONITORS=$(xrandr -q | grep ' connected' | cut -d' ' -f1)
if [ -n "`echo $MONITORS | xargs -n1 echo | grep -e \"^$EXTERNAL_MONITOR$\"`" ]; then
    # Center
    xrandr --output $EXTERNAL_MONITOR --primary --right-of eDP-1-1 --auto
    # Right
    xrandr --output DP-1-1-1 --right-of $EXTERNAL_MONITOR --auto
    # Left
    xrandr --output eDP-1-1 --dpi 96 --scale 1.25 1.25 --left-of $EXTERNAL_MONITOR --auto
else
    # Center
    xrandr --output eDP-1-1 --primary --auto
fi
#+END_SRC

***** Distribute workspaces among the screens

The distribution of desktops in bspwm seems very powerful and customizable but I
have a hard time figuring out how it really works. It seems like the names are
not necessarily connected to how I can access them.

For example giving the primary monitor dekstops 1-5 below doesn't mean that I
will use ~super+{1...5}~ to access those. Because there will be a screen to the
left of the primary monitor and that one will get one dekstop that I will access
with the ~super+1~. So the primary monitor becomes shifted by one.

#+BEGIN_SRC sh :padline yes
#
## Workspace distribution
export MONITOR=$(xrandr -q | grep primary | grep ' connected' | cut -d' ' -f1)
export MONITORS=( $(xrandr -q | grep ' connected' | cut -d' ' -f1) )
MONITOR=${MONITOR:-${MONITORS[1]}}
bspc monitor $MONITOR -d {1,2,3,4,5}
for mon in ${MONITORS[@]/${MONITOR}}; do
    bspc monitor $mon -d $mon/1
done
#+END_SRC

Using the above code on my 3-monitor setup yields the following desktop names:
#+BEGIN_SRC sh :results output :tangle no
bspc query -D --names
#+END_SRC

#+RESULTS:
: eDP-1-1/1
: 1
: 2
: 3
: 4
: 5
: DP-1-1-1/1

**** The look

These settings are from hlissner's setup
#+BEGIN_SRC sh :padline yes
#
## Looks
bspc config split_ratio          0.50
bspc config gapless_monocle      true
bspc config borderless_monocle   true
bspc config paddingless_monocle  true

bspc config pointer_modifier mod4
bspc config pointer_action1 move
bspc config pointer_action2 resize_side
bspc config pointer_action3 resize_corner

bspc config remove_disabled_monitors false
bspc config remove_unplugged_monitors true

bspc config border_width    0
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
bspc config window_gap      50
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
bspc config window_gap      30
#+END_SRC

#+BEGIN_SRC sh
bspc config top_padding     0
bspc config bottom_padding  0
bspc config left_padding    0
bspc config right_padding   0
#+END_SRC

To make it possible to use youtube in fullscreen tiled mode
[[https://www.reddit.com/r/bspwm/comments/a4ju19/youtube_video_in_fullscreen_tiled_mode/][a thread about the issue]]
#+BEGIN_SRC sh
bspc config ignore_ewmh_fullscreen all
#+END_SRC

Settings for the primary monitor
#+BEGIN_SRC sh
export MONITOR=$(xrandr -q | grep 'primary' | cut -d' ' -f1)

#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
bspc config -m $MONITOR window_gap     50
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
bspc config -m $MONITOR window_gap     30
#+END_SRC

This sets the padding value. If it's matched to the ~height~ value in ~polybar~
config the bar will be shown even if the window is in a full screen mode.
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
bspc config -m $MONITOR bottom_padding 40
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
bspc config -m $MONITOR bottom_padding 30
#+END_SRC

#+BEGIN_SRC sh
bspc config -m $MONITOR top_padding    0
bspc config -m $MONITOR left_padding   0
bspc config -m $MONITOR right_padding  0
#+END_SRC

***** Selection color

#+BEGIN_SRC sh :tangle no
# Set the border colors.
# bspc config normal_border_color "$color1"
# bspc config active_border_color "$color2"
# bspc config focused_border_color "$color15"
#+END_SRC

Use the line below if you are on bspwm >= 0.9.4
#+BEGIN_SRC sh
bspc config presel_feedback_color "$color1"
#+END_SRC

#+BEGIN_SRC sh :tangle no
# Use the line below if you are on bspwm < 0.9.4
#bspc config presel_border_color "$color1"
#+END_SRC

**** Default window rules

#+BEGIN_SRC sh :padline yes
#
## Custom rules
bspc rule -a Gimp desktop='^8' state=floating follow=on
bspc rule -a Chromium desktop='^2'
bspc rule -a mplayer2 state=floating
bspc rule -a Kupfer.py focus=on
bspc rule -a Screenkey manage=off
bspc rule -a URxvt state=tiled
#+END_SRC
**** Custom window rules

***** How to know what to name to use for the rule
I want peek to be floating as it's suppose to record what is underneath it.
This code did however not work
#+BEGIN_SRC sh :tangle no
bspc rule -a peek state=floating
#+END_SRC

But consulting the [[https://wiki.archlinux.org/index.php/bspwm#Rules][arch wiki]] I found that I need to make sure I provide the
right class name. To figure that out run the following command and click on the
window of the application you want to add a rule for.
#+BEGIN_SRC sh :tangle no
# run it in the terminal not here
xprop | grep WM_CLASS                                                                                                                                                                  ~
#+END_SRC

The output when clicking on the top of the ~Peek~ window is
#+BEGIN_EXAMPLE
WM_CLASS(STRING) = "peek", "Peek"
#+END_EXAMPLE

***** Rules

#+BEGIN_SRC sh
bspc rule -a 'Emacs:org*' state=floating
bspc rule -a Emacs split_ratio=0.5 border=off state=tiled
#+END_SRC

#+BEGIN_SRC sh
bspc rule -a Peek state=floating
#+END_SRC

#+BEGIN_SRC sh
bspc rule -a Zathura state=tiled
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
bspc rule -a Firefox desktop='^7' follow=on
#+END_SRC

**** Status bar
It was recomended in the polybar wiki,
https://github.com/jaagr/polybar/wiki, to add a launch file which could be
called from the ~bspwmrc~.

#+BEGIN_SRC sh :padline yes
#
## Launch polybar
$HOME/.config/polybar/launch.sh
#+END_SRC

*** sxhkd
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/sxhkd/sxhkdrc") :mkdirp yes
:END:

I followed the instructions from the manual and copied over the example
configuration from ~/usr/share/doc/bspwm/examples/sxhkdrc/~.

**** Independent hotkeys

#+BEGIN_SRC sh
#
# wm independent hotkeys
#

# terminal emulator
super + Return
    urxvt
#+END_SRC

A dropdown terminal can come in handy, [[https://github.com/noctuid/tdrop][tdrop]] provides that. The parameters are
the following, a for autodection of the window manager, m for monitor awareness,
s for creating a session named scratch and urxvt is the program that launches.
#+BEGIN_SRC sh
# dropdown terminal
super + grave
    tdrop -ma -s scratch urxvt
#+END_SRC

#+BEGIN_SRC sh
super + e
    emacs
#+END_SRC

#+BEGIN_SRC sh
# make sxhkd reload its configuration files:
super + Escape
    pkill -USR1 -x sxhkd
#+END_SRC

Add a shortcut for launching a floating org-capture window
#+BEGIN_SRC sh
mod4 + ctrl + shift + grave
    bspc rule -a 'Emacs' -o state=floating && org-capture
#+END_SRC

Add a shortcut for Emacs anywhere. Make it always appear tiled at the bottom
#+BEGIN_SRC sh
mod4 + apostrophe
    emacsclient -e nil && bspc rule -a 'Emacs' -o split_ratio=0.7 state=tiled split_dir=south && emacs-anywhere
#+END_SRC

***** Application launcher

I have changed the application launcher from ~dmenu~ to ~rofi~.
#+BEGIN_SRC sh
super + space
    rofi -show run

#+END_SRC

***** Lock

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
@F2
    lock -n -p
#+END_SRC
***** Password

Quickly search through my passwords

#+BEGIN_SRC sh
super + backslash
    rofi-pass
#+END_SRC

**** Hotkeys
#+BEGIN_SRC sh
#
# bspwm hotkeys
#

# quit bspwm normally
super + alt + Escape
    bspc quit

# close and kill
super + {_,shift + }w
    bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
    bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
    bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest node
super + g
    bspc node -s biggest

#+END_SRC

**** State flags

#+BEGIN_SRC sh
#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
    bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
    bspc node -g {marked,locked,sticky,private}

#+END_SRC

**** Focus and swapping
#+BEGIN_SRC sh
#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
    bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
    bspc node -f @{parent,brother,first,second}

# focus the next/previous node in the current desktop
super + {_,shift + }c
    bspc node -f {next,prev}.local

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
    bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {grave,Tab}
    bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
    bspc wm -h off; \
    bspc node {older,newer} -f; \
    bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
    bspc {desktop -f,node -d} '^{1-9,10}'

#+END_SRC

**** Preselect

#+BEGIN_SRC sh
#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
    bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
    bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
    bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
    bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#+END_SRC

**** Move/resize
#+BEGIN_SRC sh
#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
    bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
    bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
    bspc node -v {-20 0,0 20,0 -20,20 0}
#+END_SRC

Resize the gaps in tiled layout. Found inspiration [[https://github.com/desyncr/bspwmrc/blob/master/sxhkdrc ][here]]
#+BEGIN_SRC sh
#
# gaps
#

# change window gap at run time
super + plus
    bspc config -d focused window_gap $((`bspc config -d focused window_gap` + 5 ))

# Restore original gap
super + equal
    bspc config top_padding 6; bspc config -d focused window_gap 15

# decrease gap
super + minus
    bspc config -d focused window_gap $((`bspc config -d focused window_gap` - 5 ))
#+END_SRC

**** Brightness

I want to be able to control the brightness of the screen. To my help I have
[[https://haikarainen.github.io/light/][light]].
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
#
# Brightness
#
XF86MonBrightnessDown
    light -U 5
XF86MonBrightnessUp
    light -A 5
#+END_SRC

:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/bspwm/bspwmrc") :shebang "#! /bin/sh" :mkdirp yes
:END:

With ~bspwmrc~ it's important that the file is executable. With tangle there are
two different ways of making a tangled file executable
https://orgmode.org/manual/tangle_002dmode.html. I will be using the ~shebang~
argument which will org will make sure to add the shebang and make the file
executable.
**** Record

#+BEGIN_SRC sh
#
# Record
#
super + Print
    printscreen-primary.sh
#+END_SRC
**** Media

#+BEGIN_SRC sh
#
## Audio
#

# raise volume
XF86AudioRaiseVolume
    pactl set-sink-volume @DEFAULT_SINK@ +5%

# lower volume
XF86AudioLowerVolume
    pactl set-sink-volume @DEFAULT_SINK@ -5%

# mute
XF86AudioMute
    pactl set-sink-mute @DEFAULT_SINK@ toggle
#+END_SRC

** Compositor
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/compton.conf") :mkdirp yes :padline no
:END:

[[https://github.com/chjj/compton][Compton, a compositor for X]]

*** Shadows
I disabled the shadows. I need to understand better how these shadows work
before I use them.

#+BEGIN_SRC sh
#
## Shadows

shadow = false;
shadow-radius = 7;
shadow-offset-x = -7;
shadow-offset-y = -7;
log-level = "warn";
shadow-exclude = [
    "name = 'Notification'",
    "class_g = 'Conky'",
    "class_g ?= 'Notify-osd'",
    "class_g = 'Cairo-clock'",
    "_GTK_FRAME_EXTENTS@:c"
];
#+END_SRC

*** Opacity and blur
It seems like compton gives emacs some kind of dark frame on the right side,
which dissapears if I go to monocle view and back. Need to investigate that.

#+BEGIN_SRC sh :padline yes
#
## Opacity
inactive-opacity = 1.0; # 0.8
frame-opacity = 0.7;
inactive-opacity-override = false;
#+END_SRC

#+BEGIN_SRC sh
inactive-dim = 0.1;
# inactive-dim-fixed = true;
#+END_SRC

#+BEGIN_SRC sh
blur-kern = "3x3box";
blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'",
    "_GTK_FRAME_EXTENTS@:c"
];
#+END_SRC

*** Application opacity rules

I have here the example opacity rule from the arch wiki,
https://wiki.archlinux.org/index.php/compton.

In the ~man~ pages there is information about how to further customize the
rules. By adding a ~*=~ one can make a wildcard match and a ~!~ prefix will
negate the match. Currently there are three different rules for URxvt. One that
applies for a scratch buffer, one that applys for windows that isn't named
scratch and for the windows that are not in focus.
 #+BEGIN_SRC sh :padline yes
#
# Opacity rules
 opacity-rule = [
   "90:class_g = 'URxvt' && WM_NAME@:s *= 'scratch'",
   "80:class_g = 'URxvt' && !focused && WM_NAME@:s !*= 'scratch'",
   "90:class_g = 'URxvt' && focused && WM_NAME@:s !*= 'scratch'",
 #+END_SRC

 Making rofi a little bit transparent too
 #+BEGIN_SRC sh :padline no
   "100:class_g = 'Rofi'",
 #+END_SRC

One improvement for bspwm is also making the preselected areas transparent, the
default opaque look is a bit distracting.
#+BEGIN_SRC sh :padline no
   "40:class_g = 'Bspwm' && class_i = 'presel_feedback'",
#+END_SRC

It's also possible to make a program transparent depending on it's content. For
example the global org-capture window is launched with a title of ~org-capture~.
This can be seen by using the utility function ~xprop~ and clicking on the
window. So if the program is Emacs and the wm_name is org-capture then make it
transparent.
#+BEGIN_SRC sh :padline no
   "40:class_g = 'Emacs' && WM_NAME@:s = 'org-capture'",
#+END_SRC

#+BEGIN_SRC sh :padline no
];
#+END_SRC

*** Other

I haven't looked into these settings.
#+BEGIN_SRC sh :padline yes
#
## Other
fading = true;
fade-in-step = 0.03;
fade-out-step = 0.03;
fade-exclude = [ ];
backend = "xrender";
mark-wmwin-focused = false;
mark-ovredir-focused = false;
detect-rounded-corners = true;
detect-client-opacity = true;
refresh-rate = 0;
vsync = "none";
focus-exclude = [ "class_g = 'Cairo-clock'" ];
#+END_SRC

https://github.com/chjj/compton/issues/392
#+BEGIN_SRC sh
detect-transient = false;
detect-client-leader = false;
#+END_SRC

#+BEGIN_SRC sh
invert-color-include = [ ];
glx-swap-method = "undefined";
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.8; }
  dropdown_menu = { opacity = 0.8; }
};
#+END_SRC

** Status bar

[[https://github.com/polybar/polybar][Polybar, a fast and easy-to-use tool for creating status bars]]

*** launch script
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/polybar/launch.sh") :shebang "#!/usr/bin/env bash" :mkdirp yes :padline no
:END:

**** Kill active bars

Kill active bars and wait for them to die until continuing further.

#+BEGIN_SRC sh :padline yes
#
## Kill active bars
killall -q polybar
while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done
#+END_SRC

**** Kick of the bar(s)

I add the ~reload~ option to have the bar automatically reloaded when I change
the configuration file.
#+BEGIN_QUOTE
       -r, --reload
              Reload the application when the config file has been modified
#+END_QUOTE


I use the center monitor.
#+BEGIN_SRC sh :padline yes
#
## Start
if type "xrandr"; then
  for m in $(xrandr --query | grep "primary" | cut -d" " -f1); do
    MONITOR=$m polybar --reload main &
  done
else
  polybar --reload main &
fi
#+END_SRC

*** configuration
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/polybar/config") :mkdirp yes :padline no
:END:

Ideas:
- how to make sure that the centered module is actually centered. It seems to
  move depending on the size of the right/left module. I would prefer having it
  centered straight in the middle.

**** Colors
#+BEGIN_SRC sh :padline yes
[colors]
background =
background-alt = ${xrdb:color9:#444}
foreground = ${xrdb:color7:#222}
foreground-alt = ${xrdb:color7:#222}
primary = ${xrdb:color1:#222}
secondary = ${xrdb:color2:#222}
alert = ${xrdb:color3:#222}

bg = ${xrdb:background}
fg = ${xrdb:foreground}
black = ${xrdb:color0}
bblack = ${xrdb:color8}
red = ${xrdb:color1}
bred = ${xrdb:color9}
green = ${xrdb:color2}
bgreen = ${xrdb:color10}
yellow = ${xrdb:color3}
byellow = ${xrdb:color11}
blue = ${xrdb:color4}
bblue = ${xrdb:color12}
magenta = ${xrdb:color5}
bmagenta = ${xrdb:color13}
cyan = ${xrdb:color6}
bcyan = ${xrdb:color14}
white = ${xrdb:color7}
bwhite = ${xrdb:color15}

bg-alt = #0F1013
fg-alt = #25282a
icons = #555856
#+END_SRC

**** Main bar

#+BEGIN_SRC sh :padline yes
[bar/main]
monitor = ${env:MONITOR:}
wm-restack = bspwm
override-redirect = true
width = 100%
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
height = 40
offset-x = 0
offset-y = 10
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
height = 20
offset-x = 0
offset-y = 5
#+END_SRC

#+BEGIN_SRC sh
radius = 0.0
fixed-center = false
bottom = 1
background = ${colors.background}
foreground = ${colors.foreground}
line-size = 0
line-color = #f00
border-size = 0
border-color = #00000000
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
padding-left = 4
padding-right = 4
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
padding-left = 2
padding-right = 2
#+END_SRC

#+BEGIN_SRC sh
module-margin-left = 1
module-margin-right = 1
#+END_SRC

#+BEGIN_SRC sh
cursor-click = pointer
cursor-scroll = ns-resize
#+END_SRC

**** Resolution
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
dpi-x = 227
dpi-y = 227
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
dpi-x = 96
dpi-y = 96
#+END_SRC

**** Fonts
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch)) :padline yes
;
;; Fonts
font-0 = "Tamsyn:pixelsize=12;0"
font-1 = "siji:pixelsize=12;0"
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work)) :padline yes
;
;; Fonts
font-0 = "Tamsyn:pixelsize=12;1"
font-1 = "siji:pixelsize=10;0"
#+END_SRC

**** Modules setup
#+BEGIN_SRC sh :padline yes
;
;; Modules
modules-left = cpu memory pad pulseaudio app-mail app-pad-volume pad-left
modules-center = bspwm
modules-right = battery app-bluetooth app-vpn wlan app-redshift pad date
#+END_SRC

**** Modules
***** padding

#+BEGIN_SRC sh :padline yes
;
;; Padding
[module/pad]
type = custom/text
content = "   "
content-foreground = ${colors.fg-alt}
#+END_SRC

Due to font differences the audio bar has a different length on my different setups.
#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
[module/pad-left]
type = custom/text
content = "         "
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
[module/pad-left]
type = custom/text
content = "   "
#+END_SRC

#+BEGIN_SRC sh :padline yes
[module/app-pad-volume]
type = custom/script
exec = ~/.config/polybar/modules/app-pad-volume.sh
interval = 1
#+END_SRC

***** mail
#+BEGIN_SRC sh :padline yes
;
;; Mail
[module/app-mail]
type = custom/script
exec = ~/.config/polybar/modules/app-mail.sh
interval = 10
#+END_SRC

***** bluetooth
#+BEGIN_SRC sh :padline yes
;
;; Bluetooth
[module/app-bluetooth]
type = custom/script
exec = ~/.config/polybar/modules/app-bluetooth.sh
interval = 10
#+END_SRC

***** vpn
#+BEGIN_SRC sh :padline yes
;
;; VPN
[module/app-vpn]
type = custom/script
exec = ~/.config/polybar/modules/app-vpn.sh
interval = 10
#+END_SRC

***** keyboard
#+BEGIN_SRC sh :tangle no
[module/xkeyboard]
type = internal/xkeyboard
blacklist-0 = num lock
blacklist-1 = caps lock
blacklist-2 = scroll lock

format-prefix = " "
format-prefix-foreground = ${colors.foreground-alt}
format-prefix-underline = ${colors.secondary}

label-layout = %layout%
label-layout-underline = ${colors.secondary}

label-indicator-padding = 2
label-indicator-margin = 1
label-indicator-background = ${colors.secondary}
label-indicator-underline = ${colors.secondary}

#+END_SRC

***** bspwm
#+BEGIN_SRC sh :padline yes
;
;; Window Manager
[module/bspwm]
type = internal/bspwm
; icons
ws-icon-0 = 1;
ws-icon-1 = 2;
ws-icon-2 = 3;
ws-icon-3 = 4;
ws-icon-4 = 5;
ws-icon-5 = 6;
ws-icon-6 = 7;
ws-icon-7 = 8;
ws-icon-8 = 9;
ws-icon-default = x
; labels
format = <label-state> <label-mode>
label-padding = 1
label-focused = %icon%
label-focused-background = #33000000
label-focused-foreground = ${colors.green}
label-focused-padding = 1
label-occupied = %icon%
label-occupied-foreground = ${colors.icons}
label-occupied-padding = 1
label-urgent-foreground = ${colors.red}
label-empty = %icon%
label-empty-foreground = ${colors.fg-alt}
label-empty-padding = 1
#+END_SRC

***** wifi

The name of the wifi device is not the same across different computers. Use this
code to deduce the wifi-device name and use it in the following source block.
#+NAME: wifi-device
#+BEGIN_SRC sh :tangle no
nmcli device | grep 'wifi ' | cut -d' ' -f1
#+END_SRC

#+BEGIN_SRC sh :noweb tangle :padline yes
;
;; Wifi
[module/wlan]
type = internal/network
interface = <<wifi-device()>>
interval = 3.0
; labels
format-connected = <ramp-signal>
format-disconnected = 
format-disconnected-foreground = ${colors.red}
label-disconnected = %ifname% disconnected
; icons
ramp-signal-0 = 
ramp-signal-0-foreground = ${colors.foreground-alt}
ramp-signal-1 = 
ramp-signal-1-foreground = ${colors.foreground-alt}
ramp-signal-2 = 
ramp-signal-2-foreground = ${colors.foreground-alt}
ramp-signal-3 = 
ramp-signal-3-foreground = ${colors.foreground-alt}
ramp-signal-4 = 
ramp-signal-4-foreground = ${colors.foreground-alt}
#+END_SRC

***** ethernet
#+BEGIN_SRC sh :tangle no
[module/eth]
type = internal/network
interface = net0
interval = 3.0

format-connected-underline = #55aa55
format-connected-prefix = " "
format-connected-prefix-foreground = ${colors.foreground-alt}
label-connected = %local_ip%

format-disconnected =
;format-disconnected = <label-disconnected>
;format-disconnected-underline = ${self.format-connected-underline}
;label-disconnected = %ifname% disconnected
;label-disconnected-foreground = ${colors.foreground-alt}

#+END_SRC

***** date
#+BEGIN_SRC sh :padline yes
;
;; Calendar
[module/date]
type = internal/date
interval = 5
; Format
label = %date%  %time%
date = %A, %h %d
date-alt = %Y-%m-%d
time = %I:%M %p
time-alt = %H:%M:%S
format-prefix = 
format-prefix-padding = 1
format-prefix-foreground = ${colors.icons}
#+END_SRC

***** pulseaudio
#+BEGIN_SRC sh :padline yes
;
;; Audio
[module/pulseaudio]
type = internal/pulseaudio
; Format
format-volume = <ramp-volume> <bar-volume>
label-volume-foreground = ${colors.fg}
format-muted-foreground = ${colors.red}
label-muted = ""
; Bar
bar-volume-width = 8
bar-volume-foreground-0 = ${colors.blue}
bar-volume-foreground-1 = ${colors.blue}
bar-volume-foreground-2 = ${colors.blue}
bar-volume-foreground-3 = ${colors.blue}
bar-volume-foreground-4 = ${colors.blue}
bar-volume-foreground-5 = ${colors.blue}
bar-volume-foreground-6 = ${colors.blue}
bar-volume-gradient = false
bar-volume-indicator = |
bar-volume-indicator-font = 2
bar-volume-indicator-foreground = #ff
bar-volume-fill = -
bar-volume-fill-font = 2
bar-volume-empty = -
bar-volume-empty-font = 2
bar-volume-empty-foreground = ${colors.fg-alt}
ramp-volume-0 = 
ramp-volume-1 = 
ramp-volume-2 = 
#+END_SRC

***** battery
#+BEGIN_SRC sh :padline yes
;
;; Battery
[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 96
; Format
format-charging = <animation-charging> <label-charging>
format-charging-underline = #ffb52a
format-discharging = <ramp-capacity> <label-discharging>
format-discharging-underline = ${self.format-charging-underline}
format-full-prefix = " "
format-full-prefix-foreground = ${colors.icons}
format-full-underline = ${self.format-charging-underline}
; Icons
ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-foreground = ${colors.icons}
; Animation
animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-foreground = ${colors.icons}
animation-charging-framerate = 750
#+END_SRC

***** cpu
#+BEGIN_SRC sh :padline yes
;
;; CPU
[module/cpu]
type = internal/cpu
interval = 2
; Format
format = <bar-load>
format-prefix = ""
format-foreground = ${colors.icons}
format-padding = 1
; Animation
bar-load-indicator =
bar-load-width = 6
bar-load-foreground-0 = ${colors.green}
bar-load-foreground-1 = ${colors.green}
bar-load-foreground-2 = ${colors.yellow}
bar-load-foreground-3 = ${colors.red}
bar-load-foreground-4 = ${colors.red}
bar-load-fill = |
bar-load-empty = ¦
bar-load-empty-foreground = ${colors.fg-alt}
#+END_SRC

***** memory
#+BEGIN_SRC sh :padline yes
;
;; Memory
[module/memory]
type = internal/memory
interval = 3
; Format
format = <bar-used>
format-prefix = ""
format-prefix-foreground = ${colors.icons}
format-padding-left = 1
; Animation
bar-used-indicator =
bar-used-width = 6
bar-used-foreground-0 = ${colors.green}
bar-used-foreground-1 = ${colors.green}
bar-used-foreground-2 = ${colors.yellow}
bar-used-foreground-3 = ${colors.red}
bar-used-foreground-4 = ${colors.red}
bar-used-fill = |
bar-used-empty = ¦
bar-used-empty-foreground = ${colors.fg-alt}
#+END_SRC

***** TODO redshift

I am unsure which of these blocks are the one I want.

#+BEGIN_SRC sh :padline yes
;
;; Redshift
[module/app-redshift]
type = custom/script
exec = echo 1
exec-if = pgrep -x redshift
format = ""
format-foreground = ${colors.icons}
interval = 2
#+END_SRC

#+BEGIN_SRC sh :tangle no
[module/app-redshift]
type = custom/script
exec = ~/.config/polybar/modules/app-redshift
exec-if = pgrep -x redshift
;format = ""
;format-foreground = ${colors.icons}
interval = 2
#+END_SRC

***** global settings
#+BEGIN_SRC sh :padline yes
;
;; Global settings
[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
margin-bottom = 40
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
margin-bottom = 30
#+END_SRC

#+BEGIN_SRC sh
; vim:ft=dosini
#+END_SRC

*** custom modules

**** bluetooth
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/polybar/modules/app-bluetooth.sh") :shebang "#! /bin/bash" :mkdirp yes
:END:

#+BEGIN_SRC sh

#
## Bluetooth active
active=$(systemctl is-active bluetooth.service)

#
## Device connected
connected="no"
if [ "$active" = "active" ]; then
    devices=$(echo -e 'paired-devices' | bluetoothctl)
    for device in $devices; do
        if [[ $device == [0-9A-F][0-9A-F]\:[0-9A-F][0-9A-F]\:[0-9A-F][0-9A-F]\:[0-9A-F][0-9A-F]\:[0-9A-F][0-9A-F]\:[0-9A-F][0-9A-F] ]] ; then
            # Value of field Connected
            is_connected=$(echo -e 'info ' $i '\n' | bluetoothctl | grep 'Connected' | cut -d' ' -f2)
            if [[ "$is_connected" == "yes" ]]; then
               connected="yes"
            fi
        fi
    done
fi

#
## Set color and icon
if [ "$connected" = "yes" ]; then
    echo "%{F#81a2be}" # fg-blue
elif [ "$active" = "active" ]; then
    echo "%{F#c5c8c6}" # white
else
    echo "%{F#555856}" # grey
fi
#+END_SRC

**** vpn
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/polybar/modules/app-vpn.sh") :shebang "#! /bin/sh" :mkdirp yes
:END:

#+BEGIN_SRC sh

#
## VPN connection active
connection=$(nmcli connection show --active | awk '{print $3}' | grep vpn)

#
## Set color and icon
if [ "$connection" = "vpn" ]; then
    # active
    echo "%{F#81a2be}" # fg-blue
else
    # inactive
    echo "%{F#555856}" # grey
fi
#+END_SRC
**** mail
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/polybar/modules/app-mail.sh") :shebang "#! /bin/zsh" :mkdirp yes
:END:

#+BEGIN_SRC sh
#
## Unread mails
unread=$(notmuch search tag:unread | wc -l)

#
## Set color and icon
if [ "$unread" -eq "0" ]; then
    echo "%{F#555856}   " # grey
else
    # pad so that the total number of chars are always the same,
    # in this case 3
    if [ "$unread" -gt "99" ]; then
        unread="99+"
    fi
    unread=${(r:3:: :)unread}
    echo "%{F#f0c674}$unread" # yellow
fi
#+END_SRC
**** redshift
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/polybar/modules/app-redshift") :shebang "#!/usr/bin/env bash" :mkdirp yes
:END:

I am unsure which of these blocks are the one I want.

#+BEGIN_SRC sh :tangle no

# Specifying the icon(s) in the script
# This allows us to change its appearance conditionally
pgrep -x redshift &> /dev/null
if [[ $? -eq 0 ]]; then
    temp=$(redshift -p 2>/dev/null | grep temp | cut -d' ' -f3)
    temp=${temp//K/}
fi

# OPTIONAL: Append ' ${temp}K' after $icon
if [[ -z $temp ]]; then
    echo "%{F#65737E}"       # Greyed out (not running)
elif [[ $temp -ge 5000 ]]; then
    echo "%{F#8FA1B3}"       # Blue
elif [[ $temp -ge 4000 ]]; then
    echo "%{F#EBCB8B}"       # Yellow
else
    echo "%{F#D08770}"       # Orange
fi

#+END_SRC

#+BEGIN_SRC sh
# Specifying the icon(s) in the script
# This allows us to change its appearance conditionally
pgrep -x redshift &> /dev/null
if [[ $? -eq 0 ]]; then
    temp=$(redshift -p 2>/dev/null | grep temp | cut -d' ' -f3)
    temp=${temp//K/}
fi

# OPTIONAL: Append ' ${temp}K' after $icon
if [[ -z $temp ]]; then
    echo "%{F#65737E}"       # Greyed out (not running)
elif [[ $temp -ge 5000 ]]; then
    echo "%{F#8FA1B3}"       # Blue
elif [[ $temp -ge 4000 ]]; then
    echo "%{F#EBCB8B}"       # Yellow
else
    echo "%{F#D08770}"       # Orange
fi
#+END_SRC

**** screen recording
:PROPERTIES:
:header-args: tangle no
:END:

Start with the symbol
#+BEGIN_SRC sh

#+END_SRC
**** pad-volume
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/polybar/modules/app-pad-volume.sh") :shebang "#!/usr/bin/env bash" :mkdirp yes
:END:

#+BEGIN_SRC sh
#
## Audio muted?
muted=$(pacmd list-sinks | grep muted | cut -d' ' -f2)

#
## Pad or don't
if [ "$muted" = "yes" ]; then
    echo "%{F#81a2be}         " # blue
else
    echo "%{F#81a2be}" # blue
fi
#+END_SRC

** Application launcher
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/rofi/config") :mkdirp yes :padline no
:END:

[[https://github.com/davatorium/rofi][Rofi, a window switcher and application launcher]].

The configuration here is something that I have copied from ~Matt Dobson~.
Unfortunately I don't remember where I found his config.
#+BEGIN_SRC sh :padline yes
!
!! Colors
rofi.color-window: argb:f2171717, #535c5c,         #a4a4a4
rofi.color-normal: argb:00171717, #a4a4a4, argb:00535c5c, argb:00171717, #535c5c
rofi.color-urgent: argb:00171717, #cc6666, argb:e54b5160, argb:00171717, #535c5c
rofi.color-active: argb:00171717, #65acff, argb:e44b5160, argb:00171717, #535c5c
#+END_SRC

Tweaked for ~Arch~
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch)) :padline yes
!
!! Appearance
rofi.width: 1500
rofi.lines: 10
rofi.font: Roboto Mono 14
rofi.bw: 0
rofi.padding: 50
rofi.line-margin: 5
rofi.eh: 1
#+END_SRC

Tweaked for ~Ubuntu~
#+BEGIN_SRC sh :tangle (my/tangle-system '(work)) :padline yes
!
!! Appearance
rofi.width: 1200
rofi.lines: 8
rofi.font: Roboto Mono 10
rofi.bw: 0
rofi.padding: 50
rofi.line-margin: 5
rofi.eh: 1
#+END_SRC

The ~-m~ option determines the behavior of ~rofi~ where the rofi window should
appear. I want to set this globally to -1. That setting makes most sense to me.
It will be the display that I have currently focus on.
#+BEGIN_SRC sh :padline yes
!
!! Core config
rofi.m: -1
#+END_SRC

Other settings
#+BEGIN_SRC sh
rofi.sidebar-mode: true
rofi.separator-style: none
rofi.hide-scrollbar: true
rofi.show-icons: false
rofi.location: 0
!rofi.modi: window,run,drun
rofi.modi: window,run
rofi.matching: fuzzy

#+END_SRC

** Looks

Both of these configuration files has been copied from hlissers-setup. I have
also looked at the [[https://wiki.archlinux.org/index.php/GTK%2B#Examples][arch wiki examples]].

*** GTK+ 2.x
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.gtkrc-2.0") :mkdirp yes
:END:

#+BEGIN_SRC sh
include "/usr/share/themes/Arc-Dark/gtk-2.0/gtkrc"
#+END_SRC

*** GTK+ 3.x
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/gtk-3.0/settings.ini") :mkdirp yes
:END:

#+BEGIN_SRC sh
[Settings]
gtk-application-prefer-dark-theme = true
gtk-theme-name = Arc-Dark
gtk-icon-theme-name = Arc-Dark
#+END_SRC

**** TODO Mitigate GTK3+ window issues
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/gtk-3.0/gtk.css") :shebang :mkdirp yes
:END:


I have had an issue with the ~Emacs~ window that the box is rendered larger than
actual ~Emacs~. The issue seems to be this
https://wiki.archlinux.org/index.php/bspwm#Window_box_larger_than_the_actual_application.

#+BEGIN_EXAMPLE
M-x emacs-version
#+END_EXAMPLE

States that ~Emacs~ is built with ~GTK+~ so it might be worth seeing if this can
be fixed.

Had no effect what I could see but I am also unsure how this is loaded?
It might actually have had effect after I rebooted the computer. Unfortunately I
don't think that it worked.

#+BEGIN_SRC sh
.window-frame, .window-frame:backdrop {
  box-shadow: 0 0 0 black;
  border-style: none;
  margin: 0;
  border-radius: 0;
}

.titlebar {
  border-radius: 0;
}
#+END_SRC

* Editors
** Emacs

How to install doom and setup my private configuration goes here. And Emacs
anywhere as well.

#+BEGIN_SRC sh :tangle no :dir ~/src :mkdirp yes
git clone https://github.com/hlissner/doom-emacs
git clone git@github.com:niklascarlsson/doom-private
ln -s ~/src/doom-emacs ~/.emacs.d
ln -s ~/src/doom-private ~/.doom.d
#+END_SRC

*** Anywhere
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/bin/emacs-anywhere") :shebang "#!/bin/bash"
:END:

[[https://github.com/zachcurry/emacs-anywhere][Emacs anywhere]] brings Emacs into new realms. Use it to edit text in ~Firefox~.

0) Download the Emacs anywhere project:
#+BEGIN_SRC sh :tangle no
git clone git@github.com:niklascarlsson/emacs-anywhere ~/.emacs-anywhere
#+END_SRC

1) Make sure it's called from Firefox. Get the name of the calling application
#+BEGIN_SRC sh
WINDOW=$( xdotool getactivewindow )
APP_NAME=$( xprop -id "$WINDOW WM_CLASS")
x=$( echo "$APP_NAME" | awk -F ',' '{print $2}' )
x2=$(echo "$x" | tr -d '"')
Make comparison
if [[ "$x2" == *"Firefox"* ]]; then
    :
else
    exit 1;
fi
#+END_SRC

2) Mark the content in Firefox and copy it to the default clipboard
#+BEGIN_SRC sh
# clear the clipboard
echo -n | xclip
# make selection
sleep 0.2
xdotool key --clearmodifiers ctrl+a
xdotool key --clearmodifiers ctrl+c
# clear modifiers to avoid registering them
sleep 0.2 && xdotool keyup Super_L Super_R
#+END_SRC

I encountered issues that the xdotool sometimes makes the super key stuck
after I use the clearmodifiers flag. To mitigate that I found this issue on
github: https://github.com/jordansissel/xdotool/issues/43. Which is why I have
the keyup command.

3) Lastly export the copied content to a variable that will be accessible in the
   called run scrip.
#+BEGIN_SRC sh
content=$(xclip -selection c -o)
export EA_CLIPBOARD=$content

"$HOME/.emacs_anywhere/bin/run"
#+END_SRC

*** Org-mode helper functions
:PROPERTIES:
:header-args: :padline no
:END:

#+NAME: home
#+BEGIN_SRC elisp
(getenv "HOME")
#+END_SRC

#+NAME: insert-file-content
#+BEGIN_SRC elisp :var filename=""
(defun get-string-from-file (filePath)
  "Return filePath's file content."
  (with-temp-buffer
    (insert-file-contents filePath)
    (string-trim (buffer-string))))

(get-string-from-file filename)
#+END_SRC

** Neovim
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/nvim/init.vim") :mkdirp yes
:END:

[[https://github.com/neovim/neovim][Vim-fork focused on extensibility and usability]]

*** Load plugins
#+BEGIN_SRC text
"
"" Plugins

" Install plugin manager
if empty(glob('~/.config/nvim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.config/nvim/init.vim
endif

" Load plugins
call plug#begin(expand('~/.config/nvim/plugged'))
Plug 'tpope/vim-commentary' " Comments
Plug 'tpope/vim-surround' " Change surrounding chars
Plug 'tpope/vim-unimpaired' " Improve navigation
Plug 'kana/vim-textobj-user' " Enable custom text objects
Plug 'kana/vim-textobj-indent' " Indentation text object
Plug 'sgur/vim-textobj-parameter' " Function argument text object
Plug 'justinmk/vim-sneak' " Snipe characters with greater precision
Plug 'tommcdo/vim-exchange' " Provide exchange object
Plug 'qpkorr/vim-bufkill' " Improve buffer handling
Plug 'Konfekt/FastFold' " Improve folding performance
call plug#end()
#+END_SRC

*** Vim core settings
#+BEGIN_SRC text

"
"" Vim core settings

syntax enable " Enable syntax highlighting
set number " Show line number
set updatetime=100 " Decrease update time from 4s to 0.1 s, useful for gutter
set undofile " Enables persistent undo
set noswapfile " Disables swapfile
set spelllang=en_us " Sets spelling language to english
filetype plugin indent on " Enable filetype detection
set hidden " Enable hidden buffers, buffers must not be saved
set splitbelow splitright " Set Split behavior
set mouse=a "Enable mouse interaction
set clipboard+=unnamedplus " Enable clipboard paste from other sources
set equalalways " Keep windows equal
set foldmethod=syntax " determine fold method
set foldlevelstart=99 " start unfolded
set tabstop=4 shiftwidth=4 expandtab
set ignorecase smartcase " smart case enabled
set inccommand=nosplit " Get live visualization of substitution (Neovim exclusive)
set background=dark " Dark theme
" Define leader key
let mapleader=","
" Autoread when switching buffer or Vim got the focus again
au FocusGained,BufEnter * :checktime
" Mappings
" Harmonize Y behavior with (C, D)
map Y y$
"" Remap t/f movement in reverse direction
noremap \ ,
" Change mark behavior to position rather than line
" Improve search behavior
nnoremap n nzzzv
nnoremap N Nzzzv
" Command-line history with C-p/C-n
cnoremap <C-p> <up>
cnoremap <C-n> <down>
" Easier than escape
inoremap jk <ESC>
inoremap Jk <ESC>
inoremap JK <ESC>
inoremap jK <ESC>
" Macro, fast access to macro q
nmap Q @q
" Windows
nnoremap <silent> <leader>wh <C-w>h
nnoremap <silent> <leader>wj <C-w>j
nnoremap <silent> <leader>wk <C-w>k
nnoremap <silent> <leader>wl <C-w>l
nnoremap <silent> <leader>wc <C-w>c
nnoremap <silent> <leader>wo <C-w>o
nnoremap <silent> <leader>wO <C-w>o
nnoremap <silent> <leader>wr <C-w>r
nnoremap <silent> <leader>wv <C-w>v
nnoremap <silent> <leader>wV <C-w>v <C-w>p
nnoremap <silent> <leader>w= <C-w>=
nnoremap <silent> <leader>wp <C-w>p
nnoremap <silent> <leader>ws <C-w>s <C-w>p
nnoremap <silent> <leader>wS <C-w>s
nnoremap <silent> <leader>wd <C-w>c
" Built in terminal
nnoremap <leader>ot :term<CR>
" Open a terminal in a popup window
" Quiting
nnoremap <silent> <leader>qq :qall!<CR>
" Disable current highlight search
nnoremap <silent> <Esc> :noh<CR>
#+END_SRC

*** Customize plugins
#+BEGIN_SRC text
"
"" Customize plugins

" Kill current buffer
nnoremap <silent> <leader>bk :BD!<CR>
" Move to previous buffer
nnoremap <silent> <leader>b[ :BB<CR>
" Move to next buffer
nnoremap <silent> <leader>b] :BF<CR>
" Create a new empty buffer
nnoremap <silent> <leader>bn :enew<CR>
" vim-textobj-parameter
let g:vim_textobj_parameter_mapping = 'a'
" Exchange
nmap gx <Plug>(Exchange)
nmap gxc <Plug>(ExchangeClear)
nmap gxx <Plug>(ExchangeLine)
#+END_SRC

*** Status line
#+BEGIN_SRC text

"
"" Statusline

set statusline=
set statusline+=%#Identifier#\ %F " Use %f for shorter name
set statusline+=%m
set statusline+=%=
set statusline+=%2c
#+END_SRC

* Encryption
** GPG
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.gnupg/gpg-agent.conf") :mkdirp yes :padline no
:END:

Increase the cache validity for the ~gpg-agent~.
#+BEGIN_SRC sh
default-cache-ttl 86400
max-cache-ttl 86400
#+END_SRC

#+BEGIN_SRC sh (my/tangle-system '(work))
pinentry-program /usr/bin/pinentry-rofi-guile
#+END_SRC

** Rofi-pass
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/rofi-pass/config") :mkdirp yes
:END:

There is an extension to rofi for handling passwords, [[https://github.com/carnager/rofi-pass][rofi-pass]]. I have used the
default configuration that was present in the github repository.

#+BEGIN_SRC sh
# permanently set alternative root dir. Use ":" to separate multiple roots
# which can be switched at runtime with shift+left/right
# root=/path/to/root
_rofi () {
    rofi -i -no-auto-select "$@"
}
#+END_SRC

#+BEGIN_SRC sh
# default command to generate passwords
_pwgen () {
    pwgen -y "$@"
}

# image viewer to display qrcode of selected entry
# qrencode is needed to generate the image and a viewer
# that can read from pipes. Known viewers to work are feh and display
_image_viewer () {
    feh -
#    display
}

# xdotool needs the keyboard layout to be set using setxkbmap
# You can do this in your autostart scripts (e.g. xinitrc)

# If for some reason, you cannot do this, you can set the command here.
# and set fix_layout to true
fix_layout=false

layout_cmd () {
  setxkbmap us
}

# fields to be used
URL_field='url'
USERNAME_field='user'
AUTOTYPE_field='autotype'

# delay to be used for :delay keyword
delay=2

# rofi-pass needs to close itself before it can type passwords. Set delay here.
wait=0.2

# delay between keypresses when typing (in ms)
xdotool_delay=12

## Programs to be used
# Editor
EDITOR='gvim -f'

# Browser
BROWSER='xdg-open'

## Misc settings

default_do='menu' # menu, autotype, copyPass, typeUser, typePass, copyUser, copyUrl, viewEntry, typeMenu, actionMenu, copyMenu, openUrl
auto_enter='false'
notify='false'
default_autotype='user :tab pass'

# color of the help messages
# leave empty for autodetection
help_color="#4872FF"

# Clipboard settings
# Possible options: primary, clipboard, both
# clip=primary
clip=both

# Seconds before clearing pass from clipboard
clip_clear=45

## Options for generating new password entries

# open new password entries in editor
edit_new_pass="true"

# default_user is also used for password files that have no user field.
#default_user="${ROFI_PASS_DEFAULT_USER-$(whoami)}"
#default_user2=mary_ann
#password_length=12

# Custom Keybindings
autotype="Alt+1"
type_user="Alt+2"
type_pass="Alt+3"
open_url="Alt+4"
copy_name="Alt+u"
copy_url="Alt+l"
copy_pass="Alt+p"
show="Alt+o"
copy_entry="Alt+2"
type_entry="Alt+1"
copy_menu="Alt+c"
action_menu="Alt+a"
type_menu="Alt+t"
help="Alt+h"
switch="Alt+x"
insert_pass="Alt+n"
#+END_SRC

** Rofi-pinentry

The default pinentry is ~gtk-2~, which with the arc-dark theme looks alright.
However since I use rofi as the program launcher that is even better looking.
[[https://github.com/plattfot/pinentry-rofi][The pinentry-rofi]] package by ~plattfot~ makes it possible to use rofi as the
pinentry.

#+BEGIN_SRC sh :tangle no
git clone git@github.com:plattfot/pinentry-rofi-aur.git
cd pinentry-rofi-aur
makepkg -ic
#+END_SRC

I added the ~pinentry-rofi-guile~ as my first pinentry to use in the
~/usr/bin/pinentry~ file.
#+BEGIN_SRC sh :tangle no
#!/bin/sh

test -e /usr/lib/libgtk-x11-2.0.so.0 &&
exec /usr/bin/pinentry-rofi-guile  "$@"

exec /usr/bin/pinentry-gtk-2  "$@"

exec /usr/bin/pinentry-curses "$@"
#+END_SRC

* Media
** Browser

For now Firefox is my browser. I keep my eyes on the development of the
common-lisp based [[https://github.com/atlas-engineer/next][next browser]].

*** Finding the profile directory

The tricky aspect with tangling this configuration file is that the path to the
~profile directory~, in which this file should be tangled, is dynamic. It varies
from computer to computer. Now maybe I could have done this with some regexp
directly, I am not sure, but it was quite easy to just write an ~Elisp~ function
that could be used in the tangling process.

#+BEGIN_SRC elisp :tangle no
(defun my/firefox-profile-directory ()
  "Find the path to the Firefox profile directory where settings recide."
  (let ((profile-directory '())
        (firefox-path (expand-file-name "~/.mozilla/firefox/")))
    (with-temp-buffer (shell-command (concat "ls " firefox-path) t)
                      (goto-char (point-min))
                      (while (not (eobp))
                          (let ((content (string-trim (thing-at-point 'line))))
                            (if (string-match "default" content)
                                (setq profile-directory (concat firefox-path content))))
                          (forward-line 1)))
    profile-directory))
#+END_SRC

*** Minimal looks
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) (concat (my/firefox-profile-directory) "/chrome/userChrome.css")) :mkdirp yes
:END:

I created [[https://niklascarlsson.github.io/posts/a-minimalists-firefox/][a blog post]] on where I found this configuration and what it does.

#+BEGIN_SRC sh
/*
 * Do not remove the @namespace line -- it's required for correct functioning
 */
@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"); /* set default namespace to XUL */

/*
 * Hide tab bar, navigation bar and scrollbars
 * !important may be added to force override, but not necessary
 */
#TabsToolbar {visibility: collapse;}
#navigator-toolbox {visibility: collapse;}
#content browser {margin-right: -14px; margin-bottom: -14px;}
#+END_SRC

Getting rid of the status bar
#+BEGIN_SRC sh
/* Suppress Connecting/Waiting/Reading/Transerring */
#statuspanel[type="status"] {
  display: none !important;
}
/* Suppress Link Destination Overlay */
#statuspanel[type="overLink"] {
  display: none !important;
}

window[inFullscreen="true"] #statuspanel {
bottom: 0px !important; /* adjust*/
height: 0px !important; /* adjust */
}
#+END_SRC

#+BEGIN_SRC sh
@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"); /* only needed once */

statuspanel[type="status"] .statuspanel-label {display:none!important;}
#+END_SRC

*** Keyboard driven

Tridactyl. Need to add how to customize the colors.

** Music
*** Tizonia

[[https://github.com/tizonia/tizonia-openmax-il][Tizonia, command-line music player]]

Tizonia and the remote control goes here.

**** configuration
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/tizonia/tizonia.conf") :mkdirp yes :padline no
:END:

[[https://github.com/tizonia/tizonia-openmax-il][Tizonia]] is a command-line cloud music player for Linux with support for
~Youtube~, ~Spotify~ and ~SoundCloud~.

***** Start
#+BEGIN_SRC sh
# -*-Mode: conf; -*-
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
# tizonia-config v0.16.0 configuration file
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
# tizonia-config v0.17.0 configuration file
#+END_SRC

#+BEGIN_SRC sh
[ilcore]
# Tizonia OpenMAX IL Core section

# Component plugins discovery
# -------------------------------------------------------------------------
# A comma-separated list of paths to be scanned by the Tizonia IL Core when
# searching for component plugins
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
component-paths = /usr/lib/tizonia0-plugins12;
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
component-paths = /usr/lib/x86_64-linux-gnu/tizonia0-plugins12;
#+END_SRC

#+BEGIN_SRC sh
# IL Core extension plugins discovery
# -------------------------------------------------------------------------
# A comma-separated list of paths to be scanned by the Tizonia IL Core when
# searching for IL Core extensions (not implemented yet)
extension-paths =


[resource-management]
# Tizonia OpenMAX IL Resource Management (RM) section

# Resource Manager (RM) daemon interface enable/disable switch
# -------------------------------------------------------------------------
# Whether the IL RM functionality is enabled or not
enabled = false

# RM database
# -------------------------------------------------------------------------
# This is the path to the Resource Manager database
rmdb = /usr/share/tizrmd/tizrm.db


[plugins]
# OpenMAX IL Component plugins section

# Each key-value pair represents a list of any data that a
# specific component might need. The entries here must honor the following
# format: OMX.component.name.key = <semi-colon-separated list of items>

# ALSA Audio Renderer
# -------------------------------------------------------------------------
#
# OMX.Aratelia.audio_renderer.alsa.pcm.preannouncements_disabled.port0 = false
OMX.Aratelia.audio_renderer.alsa.pcm.alsa_device = default
OMX.Aratelia.audio_renderer.alsa.pcm.alsa_mixer = Master


[tizonia]
# Tizonia player section

# The default audio renderer used by the tizonia player
# -------------------------------------------------------------------------
# Valid values are:
# - OMX.Aratelia.audio_renderer.pulseaudio.pcm
# - OMX.Aratelia.audio_renderer.alsa.pcm
default-audio-renderer = OMX.Aratelia.audio_renderer.pulseaudio.pcm

# MPRIS v2 interface enable/disable switch
# -------------------------------------------------------------------------
# Valid values are: true | false
#
mpris-enabled = true

#+END_SRC

***** Spotify
#+BEGIN_SRC sh
# Spotify configuration
# -------------------------------------------------------------------------
# To avoid passing this information on the command line, uncomment
# and configure accordingly
#
spotify.user     = _downfall_
spotify.password = $(pass web/spotify)
# spotify.recover_lost_token = false (set to true to continue playback after
#                                     the token has been [spuriously?] lost)

#+END_SRC

***** Google Play Music
#+BEGIN_SRC sh
# Google Play Music configuration
# -------------------------------------------------------------------------
# To avoid passing this information on the command line, uncomment and
# configure here.
#
# gmusic.user       = user@gmail.com
# gmusic.password   = pass (account password or app-specific password for
#                          2-factor users)
# gmusic.device_id  = deviceid (16 hex digits, e.g. '1234567890abcdef')


#+END_SRC

***** SoundCloud

I got the token by following the link at the tizonia project's homepage.
#+BEGIN_SRC sh
# SoundCloud configuration
# -------------------------------------------------------------------------
# To avoid passing this information on the command line, uncomment and
# configure your SoundCloud OAuth token here.
#
# To obtain your OAuth token, Tizonia needs to be granted access to your
# SoundCloud account. Visit http://tizonia.org/docs/soundcloud/ for the
# details.
#
# soundcloud.oauth_token = X-XXXXXX-XXXXXXXX-XXXXXXXXXXXXXX
soundcloud.oauth_token = $(pass web/soundcloud | grep OAuth | cut -d ":" -f2)
#+END_SRC

***** Dirble

#+BEGIN_SRC sh
# Dirble configuration
# -------------------------------------------------------------------------
# To avoid passing this information on the command line, uncomment and
# configure your Dirble Api Key here.
#
# To obtain your Dirble API key, go to https://dirble.com/developer/
#
# dirble.api_key = xxxxxxxxxxxxxx


#+END_SRC

***** Plex
#+BEGIN_SRC sh
# Plex configuration
# -------------------------------------------------------------------------
# To avoid passing this information on the command line, uncomment and
# configure your Plex server and account auth token here.
#
# To find how to obtain a Plex user authentication token, see:
# https://support.plex.tv/articles/204059436-finding-an-authentication-token-x-plex-token/
#
# plex.base_url = xxxxxxxxxxxxxx (e.g. http://plexserver:32400)
# plex.auth_token = xxxxxxxxxxxxxx (e.g. SrPEojhap3H5Qj2DmjhX)
#+END_SRC

**** remote control
:PROPERTIES:
:header-args: :tangle no
:END:

Download the tizonia remote script which can use mpris2 to communicate with the
running tizonia instance
#+BEGIN_SRC sh
wget -O /tmp/tizonia-remote https://raw.githubusercontent.com/tizonia/tizonia-openmax-il/master/player/tools/tizonia-remote.in /tmp/tizonia-remote.in
#+END_SRC

Move it to somewhere in path and make it executable
#+BEGIN_SRC sh
mv /tmp/tizonia-remote ~/bin/tizonia-remote
chmod +x ~/bin/tizonia-remote
#+END_SRC

Make sure to also have mpris enabled in the configuration.

** Reader
*** Zathura
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/zathura/zathurarc") :mkdir p
:END:

[[https://github.com/pwmt/zathura][Zathura, a highly customizable document viewer]]. I got some inspiration from the
[[https://wiki.archlinux.org/index.php/Zathura][the arch wiki]] and the video from Luke Smith [[https://www.youtube.com/watch?v=V_Iz4zdyRM4&t=315s][zathura: a vim based minimalist pdf
reader]]

Enable copy to clipboard
#+BEGIN_SRC sh
set selection-clipboard clipboard
#+END_SRC

Control the paddings
#+BEGIN_SRC sh
set statusbar-h-padding 0
set statusbar-v-padding 0
set page-padding 1
#+END_SRC

* Mail
** Retrieve
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.mbsyncrc") :padline no
:END:

On the [[https://wiki.archlinux.org/index.php/isync#Configuring][Arch Wiki]] there is an example configuration file. I have just modified
the password and user section to my needs.

This file behaves a little bit strange though. I tried to separate the content
but when it tangled with some empty lines ~isync~ wasn't happy. That is why I
decided to keep it as a big block.

*** Personal
#+BEGIN_SRC sh
#
## Personal
#

#+END_SRC

#+BEGIN_SRC sh
IMAPAccount     posteo
Host            "posteo.de"
User            "niklas.carlsson@posteo.net"
PassCmd         "pass email/posteo.de | sed -n 1p"
SSLType         "IMAPS"
CertificateFile "/etc/ssl/certs/ca-certificates.crt"

IMAPStore posteo-remote
Account "posteo"

MaildirStore posteo-local
Path ~/.mail/posteo/
Inbox ~/.mail/posteo/inbox
Subfolders Verbatim

Channel posteo
Master  ":posteo-remote:"
Slave   ":posteo-local:"
Patterns "*"
#+END_SRC

Automatically create missing mailboxes, both locally and on the server
#+BEGIN_SRC sh
Create Both
#+END_SRC

Permanently remove all messages marked for deletion
#+BEGIN_SRC sh :tangle no
Expunge Both
#+END_SRC

Save the synchronization state files in the relevant directory
#+BEGIN_SRC sh
SyncState *
#+END_SRC

*** Work
#+BEGIN_SRC sh :tangle (my/tangle-system '(work)) :noweb tangle :padline yes
#
## Work
#
IMAPAccount     zenuity
Host            "outlook.office365.com"
User            "niklas.carlsson@zenuity.com"
PassCmd         "pass show work/zenuity/login | sed -n 1p"
AuthMechs       "PLAIN"
SSLTYPE         "IMAPS"
CertificateFile "/etc/ssl/certs/ca-certificates.crt"

IMAPStore zenuity-remote
Account   "zenuity"

MaildirStore zenuity-local
Path         "<<home()>>/.mail/zenuity/"
Inbox        "<<home()>>/.mail/zenuity/Inbox"
Trash        "<<home()>>/.mail/zenuity/Trash"
SubFolders   "Verbatim"

Channel   zenuity-inbox
Master    ":zenuity-remote:Inbox"
Slave     ":zenuity-local:"
Create    "Slave"
SyncState "*"

Channel   zenuity-sent
Master    ":zenuity-remote:Sent Items"
Slave     ":zenuity-local:Sent"
Create    "Slave"
SyncState "*"

Channel   zenuity-trash
Master    ":zenuity-remote:Deleted Items"
Slave     ":zenuity-local:Trash"
Create    "Slave"
SyncState "*"

Group   zenuity
Channel "zenuity-inbox"
Channel "zenuity-sent"
Channel "zenuity-trash"
#+END_SRC

** Index
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.notmuch-config") :noweb tangle
:END:

~notmuch~ is an indexer providing a cli and ~Emacs~ interface. This
configuration is the default gnerated config file.

https://wiki.archlinux.org/index.php/Notmuch
#+BEGIN_QUOTE
Notmuch is a mail indexer. Essentially, is a very thin front end on top of
xapian.
#+END_QUOTE

#+BEGIN_SRC sh
# .notmuch-config - Configuration file for the notmuch mail system
#
# For more information about notmuch, see https://notmuchmail.org

# Database configuration
#
# The only value supported here is 'path' which should be the top-level
# directory where your mail currently exists and to where mail will be
# delivered in the future. Files should be individual email messages.
# Notmuch will store its database within a sub-directory of the path
# configured here named ".notmuch".
#
[database]
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
path=<<home()>>/.mail
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
path=<<home()>>/.mail
#+END_SRC

#+BEGIN_SRC sh
# User configuration
#
# Here is where you can let notmuch know how you would like to be
# addressed. Valid settings are
#
#   name        Your full name.
#   primary_email   Your primary email address.
#   other_email     A list (separated by ';') of other email addresses
#           at which you receive email.
#
# Notmuch will use the various email addresses configured here when
# formatting replies. It will avoid including your own addresses in the
# recipient list of replies, and will set the From address based on the
# address to which the original email was addressed.
#
#+END_SRC

The default mail on my private computer.
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch)))
[user]
name=Niklas Carlsson
primary_email=niklas.carlsson@posteo.net
#+END_SRC

The default mail on my work computer.
#+BEGIN_SRC sh :tangle (my/tangle-system '(work)))
[user]
name=Niklas Carlsson
primary_email=niklas.carlsson@zenuity.com
#+END_SRC

#+BEGIN_SRC sh
# Configuration for "notmuch new"
#
# The following options are supported here:
#
#   tags    A list (separated by ';') of the tags that will be
#       added to all messages incorporated by "notmuch new".
#
#   ignore  A list (separated by ';') of file and directory names
#       that will not be searched for messages by "notmuch new".
#
#       NOTE: *Every* file/directory that goes by one of those
#       names will be ignored, independent of its depth/location
#       in the mail store.
#
[new]
tags=unread;inbox;
ignore=

# Search configuration
#
# The following option is supported here:
#
#   exclude_tags
#       A ;-separated list of tags that will be excluded from
#       search results by default.  Using an excluded tag in a
#       query will override that exclusion.
#
[search]
exclude_tags=deleted;spam;

# Maildir compatibility configuration
#
# The following option is supported here:
#
#   synchronize_flags      Valid values are true and false.
#
#   If true, then the following maildir flags (in message filenames)
#   will be synchronized with the corresponding notmuch tags:
#
#       Flag    Tag
#       ----    -------
#       D   draft
#       F   flagged
#       P   passed
#       R   replied
#       S   unread (added when 'S' flag is not present)
#
#   The "notmuch new" command will notice flag changes in filenames
#   and update tags, while the "notmuch tag" and "notmuch restore"
#   commands will notice tag changes and update flags in filenames
#
[maildir]
synchronize_flags=true

# Cryptography related configuration
#
# The following *deprecated* option is currently supported:
#
#   gpg_path
#       binary name or full path to invoke gpg.
#       NOTE: In a future build, this option will be ignored.
#       Setting $PATH is a better approach.
#
[crypto]
gpg_path=gpg

#+END_SRC

** Send
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.msmtprc") :tangle-mode (identity #o600) :padline no
:END:

I use ~msmtp~ for sending my emails [[https://wiki.archlinux.org/index.php/msmtp][more information in arch wiki]]. One important
aspect of the configuration file is that it needs to have the right permission.
This can be found in the link above, it should have permission ~600~.

#+BEGIN_QUOTE
The user configuration file must be explicitly readable/writeable by its owner
or msmtp will fail:
#+END_QUOTE

This is something that ~:tangle-mode~ handles, which I found information about
in the [[https://orgmode.org/manual/tangle_002dmode.html][org-manual.]]

Here is the default configuration found at the arch wiki, just with my gmail
account instead of the default one.
#+BEGIN_SRC conf
#
## Default values
#
defaults
auth           on
tls            on
tls_trust_file /etc/ssl/certs/ca-certificates.crt
logfile        ~/.msmtp.log

#
## Personal
#
account        posteo
host           posteo.de
port           587
from           niklas.carlsson@posteo.net
user           niklas.carlsson@posteo.net
passwordeval   "pass email/posteo.de"
#+END_SRC

Set a default account to private, if I am on my private computer.
#+BEGIN_SRC conf :tangle (my/tangle-system '(arch))
account default : posteo
#+END_SRC

#+BEGIN_SRC conf :tangle (my/tangle-system '(work))) :padline yes
#
## Work
#
account        zenuity
host           smtp.office365.com
port           587
from           niklas.carlsson@zenuity.com
user           niklas.carlsson@zenuity.com
passwordeval   "pass show work/zenuity/login | sed -n 1p"
account default : zenuity
#+END_SRC

** Automate
*** timer
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/systemd/user/mbsync.timer") :mkdirp t :tangle-mode (identity #o644)
:END:

#+BEGIN_SRC sh
[Unit]
Description=Mailbox synchronization timer

[Timer]
OnBootSec=2m
OnUnitActiveSec=5m
Unit=mbsync.service

[Install]
WantedBy=timers.target
#+END_SRC
*** service
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.config/systemd/user/mbsync.service") :mkdirp t :tangle-mode (identity #o644) :padline no :noweb tangle
:END:

#+BEGIN_SRC sh
[Unit]
Description=Mailbox synchronization service

[Service]
Type=oneshot
ExecStart=/usr/bin/mbsync -Va
ExecStartPost=/usr/bin/notmuch new
ExecStartPre=<<home()>>/bin/notmuch-pre
#+END_SRC

*** start
:PROPERTIES:
:header-args: :tangle no
:END:

Start the service
#+BEGIN_SRC sh
sudo systemctl daemon-reload # reload systemd
# user services don't need elevated rights
systemctl --user enable mbsync.timer
systemctl --user start mbsync.timer
#+END_SRC
*** utility
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/bin/notmuch-pre") :shebang "#!/bin/bash"
:END:

Remove mails that has been taged as deleted the --no-run -if-empty prevents the
rm to run if no files are piped otherwise the command will fail due to lack of
input arguments.
#+BEGIN_SRC sh
notmuch search --output=files --format=text0 tag:deleted | xargs -0 --no-run-if-empty /bin/rm
#+END_SRC

If the above fails due to index filed taged with deleted doesn't exist this will
remove the tag making sure that the above statement doesn't keep failing.
#+BEGIN_SRC sh
if [ $? -ne 0 ]; then
    notmuch tag -deleted tag:deleted
fi
#+END_SRC

**** TODO Don't delete flagged mails

Make a function in Emacs to avoid deleting flagged emails.

* Shells
** Zsh
*** zshrc
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.zshrc") :mkdirp yes :padline no
:END:

**** Remote editing

Emacs TRAMP uses a dumb terminal and can't handle some of the features of zsh.
So instead of being forced to switch to bash on devices that I want to be able
to edit remotely, I found the [[https://blog.karssen.org/2016/03/02/fixing-emacs-tramp-mode-when-using-zsh/][Fixing Emacs Tramp when using zsh]] post.

In short this detects if the term variable is set to dumb, disable zsh line
editing, and change the appearance of the prompt before exiting the script.

#+BEGIN_SRC sh :padline yes
#
## TRAMP compatible
#
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return
#+END_SRC

**** Extend zsh with plugins

Following the setup details on [[https://github.com/tarjoilija/zgen][zgen wiki]]. Starting with sourcing zgen on start
in zshrc.

#+BEGIN_SRC sh :padline yes
#
## Plugins
#
source "${HOME}/.zgen/zgen.zsh"
if ! zgen saved; then
    # the init script doesn't exist
    echo "Creating a zgen save"

    # plugins
    zgen load zsh-users/zsh-syntax-highlighting
    zgen load hlissner/zsh-autopair autopair.zsh develop
    zgen load zsh-users/zsh-history-substring-search
    zgen load zdharma/history-search-multi-word
    zgen load zsh-users/zsh-completions src
    zgen load zsh-users/zsh-autosuggestions
    zgen load rupa/z z.sh

    # save all to init script
    zgen save
fi
#+END_SRC

**** Vim keybindings

Enable vi-mode and set the keybindings. I copied this from [[https://github.com/hlissner/dotfiles/tree/master/shell/zsh][hlissner]].
#+BEGIN_SRC sh :padline yes
#
## Keybindings
#
bindkey -v # vi-mode
bindkey -M viins 'jk' vi-cmd-mode
bindkey -M viins ' ' magic-space

bindkey -M viins '^n' history-substring-search-down
bindkey -M viins '^p' history-substring-search-up
bindkey -M viins '^s' history-incremental-pattern-search-backward
bindkey -M viins '^u' backward-kill-line
bindkey -M viins '^w' backward-kill-word
bindkey -M viins '^b' backward-word
bindkey -M viins '^f' forward-word
bindkey -M viins '^g' push-line-or-edit
bindkey -M viins '^a' beginning-of-line
bindkey -M viins '^e' end-of-line
bindkey -M viins '^d' push-line-or-edit

bindkey -M vicmd '^k' kill-line
bindkey -M vicmd 'H'  run-help
#+END_SRC

Also make sure to set the timeout to a low value to avoid delays when pressing
escape, [[https://www.johnhawthorn.com/2012/09/vi-escape-delays/][vi-escape-delays]].
#+BEGIN_SRC sh
export KEYTIMEOUT=10
#+END_SRC

**** Configure variables

#+BEGIN_SRC sh :padline yes
#
## Variables
#
export BROWSER="firefox"
export EDITOR="nvim"
#+END_SRC

**** Prompt

#+BEGIN_SRC sh :padline yes
#
## Prompt
#
#+END_SRC

https://github.com/hlissner/dotfiles/blob/master/shell/zsh/prompt.zsh

#+BEGIN_SRC sh
_strlen() { echo ${#${(S%%)1//$~%([BSUbfksu]|([FB]|){*})/}}; }

# fastest possible way to check if repo is dirty
prompt_git_dirty() {

  # check if we're in a git repo
  [[ "$(command git rev-parse --is-inside-work-tree 2>/dev/null)" == "true" ]] || return
  # check if it's dirty
  command test -n "$(git status --porcelain --ignore-submodules -unormal)" || return

  local r=$(command git rev-list --right-only --count HEAD...@'{u}' 2>/dev/null)
  local l=$(command git rev-list --left-only --count HEAD...@'{u}' 2>/dev/null)

  (( ${r:-0} > 0 )) && echo -n " %F{red}${r}-"
  (( ${l:-0} > 0 )) && echo -n " %F{green}${l}+"
  echo -n '%f'
}

## Hooks ###############################
prompt_hook_precmd() {
  vcs_info # get git info
  # Newline before prompt, except on init
  [[ -n $PROMPT_DONE ]] && print ""; PROMPT_DONE=1
}

## Initialization ######################
prompt_init() {
  # prevent percentage showing up
  # if output doesn't end with a newline
  export PROMPT_EOL_MARK=

  # prompt_opts=(cr subst percent)
  setopt promptsubst
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  add-zsh-hook precmd prompt_hook_precmd
  # Updates cursor shape and prompt symbol based on vim mode
  zle-keymap-select() {
    case $KEYMAP in
      vicmd)      PROMPT_SYMBOL="%F{magenta}« " ;;
      main|viins) PROMPT_SYMBOL="%(?.%F{green}.%F{red})λ " ;;
    esac
    zle reset-prompt
    zle -R
  }
  zle -N zle-keymap-select
  zle -A zle-keymap-select zle-line-init

  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:*' use-simple true
  zstyle ':vcs_info:*' max-exports 2
  zstyle ':vcs_info:git*' formats ' %b'
  zstyle ':vcs_info:git*' actionformats ' %b (%a)'

  RPROMPT='%F{blue}%~%F{magenta}${vcs_info_msg_0_}$(prompt_git_dirty)%f'
  PROMPT='%F{blue}${prompt_username}%f${PROMPT_SYMBOL:-$ }'
}

prompt_init "$@"
#+END_SRC

***** TODO Make zsh prompt look good in tty as well

The prompt doesn't look that good when in the tty. Should I use
something else then lambda when in such a console with a restricted font.

This is a solution for how to detect if the shell is running in a virtual terminal
https://unix.stackexchange.com/questions/96463/detect-if-running-in-a-virtual-terminal
**** Aliases

#+BEGIN_SRC sh :padline yes
#
## Aliases
#
#+END_SRC

***** Move/Copy/Remove
#+BEGIN_SRC sh
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
#+END_SRC

***** List

List content. ~LC_COLLATE=C~ sorts in upper case letters before lower.
#+BEGIN_SRC sh
alias ln="${aliases[ln]:-ln} -v"  # verbose ln
alias ls='ls --color=auto'
alias l='ls -1'
alias ll='ls -l'
alias la='LC_COLLATE=C ls -la'
#+END_SRC

***** Bluetooth

#+BEGIN_SRC sh
alias bluecon='echo -e "connect 2C:41:A1:4C:1A:B8" | bluetoothctl &>/dev/null; echo "Connected"'
alias bluedis='echo -e "disconnect" | bluetoothctl &>/dev/null; echo "Disconnected"'
#+END_SRC
***** Directory

[[https://github.com/vigneshwaranr/bd][The recommended rebinding of bd]]
#+BEGIN_SRC sh
alias bd=". bd -si"
#+END_SRC

Set ~d~ to ~ranger~. Gives a similar behavior to my ~eshell~ setup.
#+BEGIN_SRC sh
alias d="ranger"
#+END_SRC

**** Tmux

https://github.com/hlissner/dotfiles/blob/master/shell/tmux/tmux.conf
#+BEGIN_SRC sh :padline yes
#
## Tmux
#
alias ta='tmux attach'
alias tl='tmux ls'
if [[ -n $TMUX ]]; then # From inside tmux
    alias tf='tmux find-window'
    # Detach all other clients to this session
    alias mine='tmux detach -a'
    # Send command to other tmux window
    tt() { tmux send-keys -t .+ C-u && tmux set-buffer "$*" && tmux paste-buffer -t .+ && tmux send-keys -t .+ Enter; }
    # Create new session (from inside one)
    tn() {
        local name="${1:-`basename $PWD`}"
        TMUX= tmux new-session -d -s "$name"
        tmux switch-client -t "$name"
        tmux display-message "Session #S created"
    }
else # From outside tmux
    # Start grouped session so I can be in two different windows in one session
    tdup() { tmux new-session -t "${1:-`tmux display-message -p '#S'`}"; }
fi
#+END_SRC
**** Configure zsh options

#+BEGIN_SRC sh :padline yes
#
## Zsh
#
#+END_SRC

***** General

#+BEGIN_SRC sh
WORDCHARS='_-*?[]~&.;!#$%^(){}<>' # Treat these characters as part of a word.
# General
unsetopt BRACE_CCL        # Allow brace character class list expansion.
setopt COMBINING_CHARS    # Combine zero-length punc chars (accents) with base char
setopt RC_QUOTES          # Allow 'Henry''s Garage' instead of 'Henry'\''s Garage'
setopt HASH_LIST_ALL
unsetopt CORRECT_ALL
unsetopt NOMATCH
unsetopt MAIL_WARNING     # Don't print a warning message if a mail file has been accessed.
unsetopt BEEP             # Hush now, quiet now.
setopt IGNOREEOF
# Jobs
setopt LONG_LIST_JOBS     # List jobs in the long format by default.
setopt AUTO_RESUME        # Attempt to resume existing job before creating a new process.
setopt NOTIFY             # Report status of background jobs immediately.
unsetopt BG_NICE          # Don't run all background jobs at a lower priority.
unsetopt HUP              # Don't kill jobs on shell exit.
unsetopt CHECK_JOBS       # Don't report on jobs when shell exit.
#+END_SRC

***** History

#+BEGIN_SRC sh
# History
HISTFILE=~/.zsh_history
HISTSIZE=1000                    # Max events to store in internal history.
SAVEHIST=1000                    # Max events to store in history file.
setopt BANG_HIST                 # Don't treat '!' specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt APPEND_HISTORY            # Appends history to history file on exit
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing non-existent history.
#+END_SRC

***** Looks
This setting controls the hightlightstyle
#+BEGIN_SRC sh
# Looks
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=blue'
#+END_SRC
***** Keybindings

[[https://superuser.com/questions/385175/how-to-reclaim-s-in-zsh][How to reclaim ctrl-s in zsh]]

#+BEGIN_SRC sh
# Keybindings
setopt noflowcontrol      # Reclaim Ctrl-s
#+END_SRC

Then change in the file ~.fzf/shell/keybindings.zsh~
#+BEGIN_SRC sh :tangle no
bindkey '^S' fzf-history-widget
#+END_SRC

**** Fuzzy finding

#+BEGIN_SRC sh :padline yes
#
## FZF
#
#+END_SRC

***** Keybindings
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
source /usr/share/fzf/key-bindings.zsh
#+END_SRC

#+BEGIN_SRC sh :tangel (my/tangle-system '(work))
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
#+END_SRC

***** Colors
Tweak the colors used by FZF
#+BEGIN_SRC sh :tangle no
# # FZF colors
# export FZF_DEFAULT_OPTS="
#     $FZF_DEFAULT_OPTS
#     --color fg:7,bg:0,hl:1,fg+:232,bg+:1,hl+:255
#     --color info:7,prompt:2,spinner:1,pointer:232,marker:1
# "

# # Fix LS_COLORS being unreadable.
# export LS_COLORS="${LS_COLORS}:su=30;41:ow=30;42:st=30;44:"

# Change the Fzf colors
#export FZF_DEFAULT_OPTS='
#--color fg:188,bg:233,hl:103,fg+:222,bg+:234,hl+:104
#--color info:183,prompt:110,spinner:107,pointer:167,marker:215
#'
#+END_SRC

***** Non duplicate history :deprecated:

A better for the history problem is to override the default behaviour of fzf
when viewing the history. There is a solution in this issue,
https://github.com/junegunn/fzf/pull/1287.

#+BEGIN_SRC sh :tangle no
# fuzzy find previous commands
fzf-history-widget() {
  local selected num
  setopt localoptions noglobsubst noposixbuiltins pipefail 2> /dev/null
  selected=( $(fc -rl 1 | sort -uk2,1000 | sort -nr |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_R_OPTS --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
  local ret=$?
  if [ -n "$selected" ]; then
    num=$selected[1]
    if [ -n "$num" ]; then
      zle vi-fetch-history -n $num
    fi
  fi
  zle redisplay
  typeset -f zle-line-init >/dev/null && zle zle-line-init
  return $ret
}
#+END_SRC

After setting the zsh options for history so that, duplicates are not stored but
latest entry is the one that is kept I think I don't need this function anymore.

***** Custom functions

I found this function in the [[https://github.com/junegunn/fzf/wiki/Examples#opening-files][fzf example section]]. This aligns with the
functionality that I have in ~eshell~, making it more frictionless to move in
between.
#+BEGIN_SRC sh
# fuzzy find file
ff() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}
#+END_SRC

include those hidden files as well
#+BEGIN_SRC sh
# fuzzy find hidden file
fh() {
  local files
  IFS=$'\n' files=($(find . | fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}
#+END_SRC

***** Use fzf for z

The plugin ~z~ to ~zsh~ makes navigating to known locations easier. However as
the list of directories grows there might be multiple ones that share similar
names. By combining ~fzf~ and ~z~ it's possible to fuzzy find among the
directories.

This unbinds ~z~ and redefines it as this function.
#+BEGIN_SRC sh
# fuzzy find visited directories
unalias z 2> /dev/null
z() {
  [ $# -gt 0 ] && _z "$*" && return
  cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
}
#+END_SRC

**** mounting

Dealing with the sd card reader
#+BEGIN_SRC sh :tangle (my/tangle-system '(arch)) :padline yes
#
## Mounts
#
alias mountsdcard="sudo mount $(lsblk -l -o NAME,PATH,MODEL,SIZE | grep -A1 "SD_Card_Reader" | sed -n 2p | cut -d' ' -f2) /mnt/sdcard/"
alias unmountsdcard="sudo umount /mnt/sdcard"
#+END_SRC
**** local configuration

Load a local ~zshrc~ file if it exists. The benefit is that local settings could
be stored here. For example aliases that are work specific that should not be
publicly available.

#+BEGIN_SRC sh :padline yes
#
## Local
#
[[ -f ~/.zshrc_local ]] && source "${HOME}/.zshrc_local"
#+END_SRC

*** zshenv
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.zshenv") :mkdirp yes :padline no
:END:

Set the editors that I use. ~Emacs~ for the gui stuff and ~Neovim~ for the good
old terminal.
#+BEGIN_SRC sh :padline yes
#
## Variables
#
export EDITOR=nvim
export VISUAL=nvim
#+END_SRC
Set ~VISUAL~ to neovim to get files open with nvim as default in ~ranger~.

Solve issue with zsh-autosuggestions highlight
https://github.com/zsh-users/zsh-autosuggestions/issues/229
#+BEGIN_SRC sh
export TERM=xterm-256color
#+END_SRC

Add ~HOME/bin~ to ~PATH~ to find my local binaries. To ~prepend~ or ~append~ is
exemplified [[https://stackoverflow.com/questions/11530090/adding-a-new-entry-to-the-path-variable-in-zsh ][here.]]
#+BEGIN_SRC sh :noweb tangle :padline yes
#
## Path
#
path=('<<home()>>/bin' $path) # prepend path
#+END_SRC

Following the installation notes on [[https://github.com/pyenv/pyenv][pyenv]] one needs to setup the following paths
#+BEGIN_SRC sh :padline yes
#
## Pyenv
#
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
#+END_SRC

as well as initialize the pyenv environment which should preferably be done last
#+BEGIN_SRC sh
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init - --no-rehash)"
fi
#+END_SRC

** Bash
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "/tmp/.bashrc")
:END:
*** default
This is the default content that where in the rc file at start
#+BEGIN_SRC sh
#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'
PS1='[\u@\h \W]\$ '
#+END_SRC

*** external harddrive
Mount external
#+BEGIN_SRC sh
# mount ssd
alias mountssd='sudo ldm -d -u niklascarlsson'
#+END_SRC
** Inputrc
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "/tmp/.inputrc")
:END:

If zsh is not found on the computer this will create an inputrc file enabling
vi-mode in bash. It will try to mimic emacs-mode(readline bindings) in insert
mode but retain normal mode.

#+BEGIN_SRC sh
# Found these settings here:
# https://unix.stackexchange.com/questions/303631/how-can-i-setup-a-hybrid-readline-with-emacs-insert-mode-and-vi-command-mode/409866
# using vi mode in bash and emulate emacs keybindings in vim-insert mode
set editing-mode vi

set keymap emacs
"\ee": vi-editing-mode

set keymap vi-command
"\ee": emacs-editing-mode

# key bindings to get out of vi-editing-mode
set keymap vi-insert
"\ee": emacs-editing-mode

# emacs keybindings in vi-insert mode
"\C-@": set-mark
"\C-]": character-search
"\C-_": undo
"\C-a": beginning-of-line
"\C-b": backward-char
"\C-d": delete-char
"\C-e": end-of-line
"\C-f": forward-char
"\C-g": abort
"\C-k": kill-line
"\C-l": clear-screen
"\C-o": operate-and-get-next
"\C-q": quoted-insert
"\C-n": next-history
"\C-p": previous-history

# Change the color of the cursor depending on mode
# https://stackoverflow.com/questions/44534678/how-to-change-cursor-shape-depending-on-vi-mode-in-bash
set show-mode-in-prompt on
set vi-cmd-mode-string "\1\e[2 q\2"
set vi-ins-mode-string "\1\e[6 q\2"

# Enable Readline not waiting for additional input when a key is pressed.
# Needed for the mappings below.
# https://unix.stackexchange.com/questions/318433/bash-urxvt-delay-after-esc-in-vi-mode
set keyseq-timeout 0

#+END_SRC

* Terminal
** Multiplexing
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/.tmux.conf") :mkdirp yes :padline no
:END:

[[https://github.com/tmux/tmux][Tmux, a terminal multiplexer]]

*** TODO Fix tmux settings incompatibility

Version 2.9 introduced some breaking changes to the styling, here is some discussion:
https://github.com/tmux/tmux/issues/1689

An example is here:
#+BEGIN_SRC sh :tangle no
# before 2.9
# setw -g window-status-fg colour236
# setw -g window-status-bg default
# setw -g window-status-attr none
# setw -g window-status-format '#[fg=colour8] #I #[fg=default]#W '

# after 2.9
set -g window-status-style bg=default,fg=colour236,none
#+END_SRC

*** General settings

The plugin [[https://github.com/tmux-plugins/tmux-sensible][tmux-sensible]] has many sane options as default. I will use many of
them from there.

#+BEGIN_SRC sh
#
## General
#
#+END_SRC

I haven't checked what the setting does but it is suggested to be set here for
the issue I am trying to solve namnely to have the autosuggestions shown in a
highlighted way. Currently everything looks like a command.
https://github.com/zsh-users/zsh-autosuggestions/issues/229
#+BEGIN_SRC sh
set -g default-terminal screen-256color
#+END_SRC

#+BEGIN_SRC sh
set -g history-limit 50000 # increase history
#+END_SRC

Rather than constraining window size to the maximum size of any client connected
to the *session*, constrain window size to the maximum size of any client
connected to *that window*. Much more reasonable.
#+BEGIN_SRC sh
setw -g aggressive-resize off
#+END_SRC

#+BEGIN_SRC sh
setw -g mouse on
#+END_SRC

Fix mouse scrolling: enter copy mode on scroll-up, exits it when scrolled to bottom.
#+BEGIN_SRC sh
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"
#+END_SRC

*** Display

#+BEGIN_SRC sh :padline yes
#
## Display
#
set -g set-titles on
set -g set-titles-string "tmux [#H] #S:#W:#T"
#+END_SRC

Zero-based indexing is fine in programming languages, but not so much in a
multiplexer when zero is on the other side of the keyboard.
#+BEGIN_SRC sh
set -g base-index 1
setw -g pane-base-index 1

#+END_SRC

#+BEGIN_SRC sh
setw -g automatic-rename on # rename window to reflect current program
set -g renumber-windows on  # renumber windows when a window is closed
#+END_SRC

Display tmux messages longer.
#+BEGIN_SRC sh
set -g display-time 1500
set -g display-panes-time 800
#+END_SRC

Focus events enabled for terminals that support them
#+BEGIN_SRC sh
set -g focus-events on
#+END_SRC

*** Important keybindings

#+BEGIN_SRC sh :padline yes
#
## Keybindings
#
#+END_SRC

I want Vi-bindings on.
#+BEGIN_SRC sh
setw -g mode-keys vi
#+END_SRC

When I started using tmux I had a delay in zsh and in tmux there was a
noticable delay as well. This article describes how to deal with it by seting
the ~escape-time~ parameter.
https://www.johnhawthorn.com/2012/09/vi-escape-delays/
#+BEGIN_SRC sh
set -s escape-time 0
#+END_SRC

*** Window management
These keybindings makes more sense from a Vim perspective.
#+BEGIN_SRC sh
unbind %
unbind '"'
bind s split-window -c "#{pane_current_path}" -v
bind v split-window -c "#{pane_current_path}" -h
bind c new-window -c "#{pane_current_path}"
#+END_SRC

*** Pane management

Windows in tmux can be thougth of as tabs. So breaking a pane to a window
basically takes, what I would call a window and makes it into a tab.

Break pane into a window.
#+BEGIN_SRC sh
bind = select-layout even-vertical
bind + select-layout even-horizontal
bind - break-pane
bind _ join-pane
#+END_SRC

Resizing and pane switching with Vi-ish bindings.
#+BEGIN_SRC sh
# Pane resizing
bind C-h resize-pane -L 6
bind C-j resize-pane -D 6
bind C-k resize-pane -U 6
bind C-l resize-pane -R 6
bind -n M-h resize-pane -L 6
bind -n M-j resize-pane -D 6
bind -n M-k resize-pane -U 6
bind -n M-l resize-pane -R 6
# Swap panes directionally
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# Other
bind o resize-pane -Z
bind S choose-session
bind W choose-window
bind / choose-session
bind . choose-window
bind n run 'TMUX= tmux new-session -t "$(basename \"$PWD\")" -d \; switch-client -t "$(basename \"$PWD\")"'
bind N run 'TMUX= tmux new-session -t "$(tmux display-message -p #S)" -s "$(tmux display-message -p #S-clone)" -d \; switch-client -n \; display-message "session #S cloned"'
bind | select-layout even-horizontal
bind _ select-layout even-vertical
#+END_SRC

Clever way of rebinding the ~prefix ]/[~ to navigate between active sessions.
#+BEGIN_SRC sh
# switch between sessions
bind -r [ switch-client -p
bind -r ] switch-client -n
#+END_SRC

Killing
#+BEGIN_SRC sh
bind x kill-pane
bind X kill-window
bind q kill-session
bind Q kill-server
#+END_SRC

*** Copy mode
Enable vi bindings for Copy mode
#+BEGIN_SRC sh :padline yes
#
## Copy-Mode
#
bind Enter copy-mode # enter copy mode
bind b list-buffers  # list paster buffers
bind p paste-buffer  # paste from the top pate buffer
bind P choose-buffer # choose which buffer to paste from
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-selection
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi H send -X start-of-line
bind -T copy-mode-vi L send -X end-of-line
#+END_SRC

*** Reload configuration
#+BEGIN_SRC sh :padline yes
#
## Reload
#
bind r source-file $HOME/.tmux.conf \; display-message "  Config reloaded..".
bind ^r refresh-client
#+END_SRC

*** Theme
Load the theme
#+BEGIN_SRC sh :padline yes
#
## Theme
#
# Statusbar
set -g status-position bottom
set -g status-justify centre
set -g status-bg default
set -g status-fg colour15
set -g status-interval 10
set -g status-left '#[fg=colour236]―――――――――――――――――――――――――'
set -g status-right '#[fg=colour236]―――――――――――――――――――――――――'
set -g status-right-length 12
set -g status-left-length 12
# Messages
setw -g message-style bg=colour4,fg=colour237
setw -g message-command-style bg=black,fg=blue
# Silent
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity on
set-option -g bell-action none
# Mode indication
setw -g clock-mode-colour colour135
setw -g mode-style bg=colour238,fg=colour196
# Panes
setw -g pane-border-style bg=default,fg=colour235
setw -g pane-active-border-style bg=default,fg=colour5
# Windows
set -g window-status-current-style bg=default,fg=colour2,none
setw -g window-status-current-format ' #W '
set -g window-status-style bg=default,fg=colour236,none
setw -g window-status-format ' #W '
setw -g window-status-activity-style bg=default,fg=colour240,none
setw -g window-status-bell-style bg=colour1,fg=colour255,bold
#+END_SRC

*** Load plugins

**** Plugin manager
~Plugin manager~
https://github.com/tmux-plugins/tpm
#+BEGIN_SRC sh :padline yes
#
## Plugins
#
set -g @plugin 'tmux-plugins/tpm'
#+END_SRC

| Command          | Action                      |
|------------------+-----------------------------|
| prefix + I       | Installs new plugins        |
| prefix + U       | Updates plugins             |
| prefix + alt + u | Removes/uninstalls plugins  |

**** Custom plugins
***** copy-cat
[[https://github.com/tmux-plugins/tmux-copycat][tmux-copycat]] enables
- regex searches
- search result highlighting
- predefined searches (especially if combined with tmux-yank)

#+BEGIN_SRC sh
set -g @plugin 'tmux-plugins/tmux-copycat'
#+END_SRC

***** yank
In normal mode ~prefix + y~ copies the command line to clipboard.
In copy mode ~y~ copies selection to clipboard.
In copy mode ~Y~ copies and pastes it to the command line.
#+BEGIN_SRC sh
set -g @plugin 'tmux-plugins/tmux-yank'
#+END_SRC

#+RESULTS:
***** open

Key bindings
#+BEGIN_QUOTE
In tmux copy mode:

    o - "open" a highlighted selection with the system default program
    Ctrl-o - open a highlighted selection with the $EDITOR
    Shift-s - search the highlighted selection directly inside a search engine (defaults to google).

In copy mode:

    highlight file.pdf and press o - file will open in the default PDF viewer.
    highlight file.doc and press o - file will open in system default .doc file viewer.
    highlight http://quote.com and press o - link will be opened in the default browser.
    highlight file.txt and press Ctrl-o - file will open in $EDITOR.
    highlight TypeError: 'undefined' is not a function and press Shift-s - the text snipped will be searched directly inside google by default
#+END_QUOTE

#+BEGIN_SRC sh
set -g @plugin 'tmux-plugins/tmux-open'
#+END_SRC

**** start pluings
Start the plugin manager

Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf).
#+BEGIN_SRC sh
run -b '~/.tmux/plugins/tpm/tpm'
#+END_SRC

** Scripts

These are my custom utility scripts that I use.

*** Music player :tmux:tizonia:
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/bin/music-tmux") :shebang "#! /bin/zsh"
:END:

A music player setup combining ~tizonia~ with the music visualizer ~cava~ and
volume control ~ncpamixer~ into a three window setup with ~tmux~.

#+BEGIN_SRC sh
tmux new-session \; \
    send-keys 'ncpamixer' C-m \; \
    send-keys LL \; \
    split-window -v \; \
    split-window -v \; \
    select-layout even-vertical \; \
    send-keys 'cava' C-m \; \
    select-pane -U \;
#+END_SRC

*** Glitch lock
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/bin/glitcher") :shebang "#! /bin/zsh"
:END:

Glitch locking the screen utilizing ~videoglitch~

#+BEGIN_SRC sh
OUTPUT='/tmp/i3lock.png'
scrot -z $OUTPUT
convert $OUTPUT -scale '50%' $OUTPUT
videoglitch -c gm $OUTPUT $OUTPUT
convert $OUTPUT -scale '200%' $OUTPUT
i3lock -i $OUTPUT -t
#+END_SRC

*** Vpn utility :vpn:
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/bin/vpn-toggle") :shebang "#! /bin/zsh" :padline no
:END:

The purpose of this script should be to toggle a vpn connection between active
and inactive.

The third column contains the type of connection. To not be fooled by a name
of a connection that might contain the word vpn I extract this column and grep
for vpn.
#+BEGIN_SRC sh
connection=$(nmcli connection show --active | awk '{print $3}' | grep vpn)
#+END_SRC

If a connection is detected set it to down otherwise start it.
#+BEGIN_SRC sh
if [ "$connection" = "vpn" ]; then
    # deactivate
    active_connection=$(nmcli connection show --active | grep vpn | awk '{print $1}')
    nmcli connection down $active_connection >/dev/null 2>&1
else
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch))
    # activate
    printf $(pass network/ovpn)'\n' | nmcli connection up ovpn-se-tcp --ask >/dev/null 2>&1
#+END_SRC

#+BEGIN_SRC sh :tangle (my/tangle-system '(work))
    # activate
    printf $(pass work/zenuity/login | sed -n 1p)'\n' | nmcli con up Z-VPN-PKI-SE --ask >/dev/null 2>&1
#+END_SRC

#+BEGIN_SRC sh
fi
#+END_SRC

~Note:~ an idea for the future might be to utilize a rofi popup to select which
vpn connection to use when activating. Currently one is hardcoded.
*** Control monitor brightness :python:xrandr:
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/bin/monitor-brightness") :shebang "#!/usr/bin/env python"
:END:

Use xrandr and Python to adjust the monitor brightness.

Improvements
- make it so that the function can operate on the monitor that currently has the
  focus in bspwm. Making this a feature that not only works on the external screen.

#+BEGIN_SRC python
# -*- mode: python-*-
import subprocess
import sys
import numpy as np

def _get_clamped_brightness(brightness):
    clamp = lambda n, minn, maxn: max(min(maxn, n), minn)
    return clamp(brightness, 0.0, 1.0)

def adjust_brightness(adjustment_value):
    # Get a list of connected monitors and their brightness levels
    connected_monitors = subprocess.check_output(
        "xrandr -q | grep ' connected' | cut -d' ' -f1",
        shell=True,
        universal_newlines=True).strip().split()
    current_brightness = subprocess.check_output(
        "xrandr --verbose | grep 'Brightness' | cut -d' ' -f2",
        shell=True,
        universal_newlines=True).strip().split()

    # Find sought after monitor
    monitor = 'eDP-1'
    for idx, m in enumerate(connected_monitors):
        if m == monitor:
            # TODO add signed float as input so that the user and choose to
            # decrement or increment and make sure the output value is bound between
            # 0 and 1
            new_brightness = \
                _get_clamped_brightness(float(current_brightness[idx]) +
                                        adjustment_value)

            command = "xrandr --output {0} --brightness {1:.1f}".format(
                monitor, new_brightness)
            subprocess.call(command, shell=True)


if __name__ == '__main__':
    if len(sys.argv) == 2:
        adjust_brightness(float(sys.argv[1]))
#+END_SRC
*** Set keyboard map depending on external keyboard
:PROPERTIES:
:header-args: :shebang "#!/usr/bin/env bash" :mkdirp yes
:END:

Because I run Arch Linux on a Macbook I end up in the situation that if I have
some external keyboards plugged in I want to switch the location on.

#+BEGIN_SRC sh :tangle (my/tangle-system '(arch) "~/bin/set-keymap")
keyboard_device="04d9:0167"
lsusb_output="$(lsusb -d $keyboard_device)"
if [ -z "$lsusb_output" ]; then
    # lsusb_output is empty, keyboard is not connected
    setxkbmap -layout us,se -option grp:shifts_toggle,ctrl:nocaps
else
    # lsusb_output is not empty, keyboard is connected
    setxkbmap -layout us,se -option grp:shifts_toggle,ctrl:nocaps,altwin:swap_lalt_lwin
fi
#+END_SRC


#+BEGIN_SRC sh :tangle (my/tangle-system '(work) "~/bin/set-keymap")
keyboard_device="1209:2301" # keyboardio
lsusb_output="$(lsusb -d $keyboard_device)"
if [ -z "$lsusb_output" ]; then
    # keyboardio is not connected
    setxkbmap -layout us,se -option grp:shifts_toggle,ctrl:nocaps,altwin:swap_lalt_lwin
else
    # keyboardio is connected
    setxkbmap -layout us,se -option grp:shifts_toggle
fi
#+END_SRC
*** Print screen of primary monitor
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/bin/printscreen-primary.sh") :shebang "#!/usr/bin/env zsh" :mkdirp yes
:END:

[[https://gist.github.com/naelstrof/f9b74b5221cdc324c0911c89a47b8d97][Example of retriving size of screen]]


Here is the code that does what I want. A screenshot of the primary monitor. Of
course here the size and everything is hardcoded but that can be fixed.
#+BEGIN_SRC sh :tangle no
maim /dev/stdout | convert -crop 2560x1440+1920x0 /dev/stdin ~/tmp/screenshot.png
#+END_SRC

First query xrandr
#+BEGIN_SRC sh :results output :tangle no
xrandr -q | grep 'primary'
#+END_SRC

#+RESULTS:
: DP-1-1 connected primary 2560x1440+1920+0 (normal left inverted right x axis y axis) 597mm x 336mm

Get the numbers
#+BEGIN_SRC sh :results output :tangle no
xrandr -q | grep 'primary' | cut -d' ' -f4
#+END_SRC

#+RESULTS:
: 2560x1440+1920+0

Extract each dimension
#+BEGIN_SRC sh :results output :tangle no
xrandr -q | grep 'primary' | cut -d' ' -f4 | awk -F "[x+]" '{print $1}'
xrandr -q | grep 'primary' | cut -d' ' -f4 | awk -F "[x+]" '{print $2}'
xrandr -q | grep 'primary' | cut -d' ' -f4 | awk -F "[x+]" '{print $3}'
xrandr -q | grep 'primary' | cut -d' ' -f4 | awk -F "[x+]" '{print $4}'
#+END_SRC

#+RESULTS:
: 2560
: 1440
: 1920
: 0

Export it to a script:
#+BEGIN_SRC sh
MONITOR_DIMENSIONS=$(xrandr -q | grep 'primary' | cut -d' ' -f4)
WIDTH=$(echo $MONITOR_DIMENSIONS | awk -F "[x+]" '{print $1}')
HEIGHT=$(echo $MONITOR_DIMENSIONS | awk -F "[x+]" '{print $2}')
X_OFFSET=$(echo $MONITOR_DIMENSIONS | awk -F "[x+]" '{print $3}')
Y_OFFSET=$(echo $MONITOR_DIMENSIONS | awk -F "[x+]" '{print $4}')

maim /dev/stdout | convert -crop  "${WIDTH}x${HEIGHT}+${X_OFFSET}x${Y_OFFSET}" /dev/stdin ~/screenshots/$(date +%F-%T).png && notify-send "Fullscreen screenshot saved"
#+END_SRC
*** Record primary monitor
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch work) "~/bin/record-primary.sh") :shebang "#! /bin/zsh" :mkdirp yes
:END:

#+BEGIN_SRC sh
## Primary monitor dimensions
MONITOR_DIMENSIONS=$(xrandr -q | grep 'primary' | cut -d' ' -f4)
WIDTH=$(echo $MONITOR_DIMENSIONS | awk -F "[x+]" '{print $1}')
HEIGHT=$(echo $MONITOR_DIMENSIONS | awk -F "[x+]" '{print $2}')
X_OFFSET=$(echo $MONITOR_DIMENSIONS | awk -F "[x+]" '{print $3}')
Y_OFFSET=$(echo $MONITOR_DIMENSIONS | awk -F "[x+]" '{print $4}')

#
## Record
ffmpeg -video_size "${WIDTH}x${HEIGHT}" \
    -framerate 25 -thread_queue_size 512 -f x11grab -i :0.0+"${X_OFFSET}",0 \
    -f alsa -thread_queue_size 512 -i default \
    -c:v libx264 -crf 0 -preset ultrafast -framerate 25\
    $1
#+END_SRC

* Utility applications
** Screen color temperature
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch) "~/.config/redshift/redshift.conf") :mkdirp yes
:END:

The configuration is a copy from [[https://github.com/hlissner/dotfiles][hlissner]].
#+BEGIN_SRC text
[redshift]
temp-day=6500
temp-night=3600

; Enable/Disable a smooth transition between day and night
transition=1

;brightness=0.9
;brightness-day=1.0
;brightness-night=0.85
; screen gamma for all colors...
gamma=1.0
; or each color channel individually
;gamma=0.8:0.7:0.8
;gamma-day=0.8:0.7:0.8
;gamma-night=0.6

; redshift -l list
location-provider=manual

; redshift -m list
adjustment-method=randr

; redshift -l PROVIDER:help
[manual]
;; Gothenburg
lat=57.696991
lon=11.986500

[randr]
;screen=0
#+END_SRC

Redshift

[[https://github.com/jonls/redshift][Redshift, color temperature adjustor]]

** Notifications
:PROPERTIES:
:header-args: :tangle (my/tangle-system '(arch) "~/.config/dunst/dunstrc") :padline no :mkdirp yes
:END:

[[https://github.com/dunst-project/dunst][Dunst, a lightweight and customizable notification daemon]]

#+BEGIN_SRC sh
[global]
    alignment = left
    markup = full
    bounce_freq = 0
    browser = /usr/bin/firefox -new-tab
    dmenu = /usr/bin/rofi -dmenu -p dunst:
    follow = none
    font = UW Ttyp0 10
    # font = Misc Tamsyn 12
    format = "%s\n%b"
    # geometry [{width}]x{height}][+/-{x}+/-{y}]
    geometry = "365x15-21+21"
    history_length = 20
    horizontal_padding = 16
    idle_threshold = 120
    ignore_newline = no
    indicate_hidden = yes
    line_height = 0
    monitor = 0
    padding = 12
    separator_color = "#18191b"
    separator_height = 2
    show_age_threshold = 60
    show_indicators = yes
    shrink = no
    sort = yes
    startup_notification = false
    sticky_history = yes
    transparency = 1
    word_wrap = yes
    max_icon_size = 64
    # Align icons left/right/off
    icon_position = right
    # Paths to default icons.
    icon_path = /usr/share/icons/hicolor/32x32/apps/:/usr/share/icons/Adwaita/32x32/actions/
    frame_width = 0
    frame_color = "#131416"

[shortcuts]
    context = ctrl+shift+period

[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#0a0b0c"
    foreground = "#b5bd68"
    timeout = 8

[urgency_normal]
    background = "#b5bd68"
    foreground = "#131416"
    timeout = 14

[urgency_critical]
    background = "#cc6666"
    foreground = "#131416"
    timeout = 0
#+END_SRC

* WIP

This work in progress section contains some ideas that I am exploring but where
I haven't found a good solution or reached a conclusion.

** Detect if keyboard is plugged in :keyboard:

Use something to detect if a keyboard is plugged in so I can update the
~setxkbmap~ command accordingly. This is currently a problem when my Macbook
doesn't have an external keyboard plugged in.

Detect the active usb devices:
#+BEGIN_SRC sh
lsusb
#+END_SRC

#+RESULTS:
| Bus | 2 | Device | 003: | ID | 05ac:8406 | Apple,    | Inc.           |           |                   |            |     |    |
| Bus | 2 | Device | 002: | ID | 04e8:61f5 | Samsung   | Electronics    | Co.,      | Ltd               | Portable   | SSD | T5 |
| Bus | 2 | Device | 001: | ID | 1d6b:0003 | Linux     | Foundation     | 3.0       | root              | hub        |     |    |
| Bus | 1 | Device | 005: | ID | 05ac:0273 | Apple,    | Inc.           | Internal  | Keyboard/Trackpad | (ISO)      |     |    |
| Bus | 1 | Device | 003: | ID | 05ac:8290 | Apple,    | Inc.           | Bluetooth | Host              | Controller |     |    |
| Bus | 1 | Device | 008: | ID | 046d:c01d | Logitech, | Inc.           | MX510     | Optical           | Mouse      |     |    |
| Bus | 1 | Device | 006: | ID | 04d9:0167 | Holtek    | Semiconductor, | Inc.      |                   |            |     |    |
| Bus | 1 | Device | 007: | ID | 0424:4063 | Standard  | Microsystems   | Corp.     |                   |            |     |    |
| Bus | 1 | Device | 004: | ID | 0424:2640 | Standard  | Microsystems   | Corp.     | USB               | 2.0        | Hub |    |
| Bus | 1 | Device | 002: | ID | 0424:2514 | Standard  | Microsystems   | Corp.     | USB               | 2.0        | Hub |    |
| Bus | 1 | Device | 001: | ID | 1d6b:0002 | Linux     | Foundation     | 2.0       | root              | hub        |     |    |

Extract if there is an external keyboard plugged in
#+BEGIN_SRC sh
lsusb -d 04d9:0167
#+END_SRC

#+RESULTS:

** Mouse toggle

The trackpad on my work computer sucks, I want a mouse toggle script that I can
call from rofi, [[https://askubuntu.com/questions/199271/x11-disable-mouse][inspiration]]. This would make it easy to turn it off when I don't
have an external keyboard attached.

*** TODO Differentiate between internal and external keyboard
:PROPERTIES:
:header-args: :tangle no
:END:
An improvement will be to make this conditional. I want to only start
xcape as long as the keyboardio can't be detected that it is plugged in. Cause
in that case this modification is not needed.

https://askubuntu.com/questions/337411/how-to-permanently-assign-a-different-keyboard-layout-to-a-usb-keyboard

I should probably have a strategy that when there is a usb keyboard detected.
Investigate if it is my special external keyboard. If so don't do any remaping.
Otherwise do it since I will only have the internal keyboard at my disposal.

#+BEGIN_SRC sh :results output
xinput -list | grep "Keyboard"
#+END_SRC

#+RESULTS:
: ⎜   ↳ USB Keyboard                                id=11   [slave  pointer  (2)]
:     ↳ USB Keyboard                                id=12   [slave  keyboard (3)]
** Remotely control tizonia

To switch to the next song
#+BEGIN_SRC sh :results none
tizonia-remote next
#+END_SRC

To switch to the previous song
#+BEGIN_SRC sh :results none
tizonia-remote prev
#+END_SRC

To toggle pause
#+BEGIN_SRC sh :results none
tizonia-remote pause
#+END_SRC
