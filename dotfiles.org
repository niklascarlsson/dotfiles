#+TITLE: dotfiles
* xorg
** xinitrc
*** HIDPI screen support
I found an example configuration for the retina display at
https://ellipticaldoor.com/2017-10-11-installing-arch-linux-on-a-macbook-with-retina-hidpi-support-and-graphic-switching/
Currently I have commented out the gdk and qt settings until I read up on what
they actually does. The xrandr command however I needed because by default the
output of the ~xrandr -q~ said the dpi was 96 which was clearly incorrect. I
verified that the 227 was correct by consulting the apple website for the
macbook specs.

#+NAME: xinit-hidpi
#+BEGIN_SRC sh
#export GDK_SCALE=2
#export GDK_DPI_SCALE=0.95
#export QT_SCREEN_SCALE_FACTORS=0.9
#export QT_AUTO_SCREEN_SCALE_FACTOR=2
#export QT_SCALE_FACTOR=2

xrandr --dpi 227
#+END_SRC

*** Keyboard settings

These are the settings for the keyboard.
#+NAME:xinit-keyboard
#+BEGIN_SRC text
setxkbmap -layout us,se -option grp:shifts_toggle,ctrl:nocaps
#+END_SRC

I learnt about the ~setxkbmap~ at the [[https://wiki.archlinux.org/index.php/Xorg/Keyboard_configuration#Using_setxkbmap][arch wiki]], where else. Let's break down
the line. The ~layout~ specifies ~American~ and ~Swedish~ layouts. One can
switch between these two keyboard layouts by pressing both ~shifts~ at the same
time. Last I swap ctrl to caps and remove capslock.

*** Launch programs
I need to launch sxhkd since bspwm is relying upon that program to handle the
keybindings. I launch the terminal as well at startup. It can be convinent at
times when I hadn't installed rofi. Can probably be removed now.
#+NAME: xinit-programs
#+BEGIN_SRC sh
sxhkd &
urxvt &
compton &
exec bspwm
#+END_SRC

*** The configuration file
#+BEGIN_SRC text :tangle ~/.xinitrc :noweb yes
#! /bin/sh

# customize xresources
[[ -f ~/.Xresources ]] && xrdb  ~/.Xresources

# hidpi settings
<<xinit-hidpi>>

# keyboard settings
<<xinit-keyboard>>

# start programs
<<xinit-programs>>
#+END_SRC

** xresources
*** HIDPI
The configuration of hidpi parameters originate from
https://ellipticaldoor.com/2017-10-11-installing-arch-linux-on-a-macbook-with-retina-hidpi-support-and-graphic-switching/
#+NAME: xresources-hidpi
#+BEGIN_SRC sh
!! hidpi
Xft.dpi: 227
Xft.rgba: rgb
Xft.antialias: true
Xft.hinting: false
Xft.lcdfilter: lcddefault
#+END_SRC

*** Colors
The colors originate from ~hlissners~ dotfiles setup. Another source for color
schemes might be https://terminal.sexy/.
#+NAME: xresources-colors
#+BEGIN_SRC sh
!! Colors
#define blk  #141517
#define bblk #969896
#define red  #cc6666
#define bred #de935f
#define grn  #b5bd68
#define bgrn #757d28
#define ylw  #f0c674
#define bylw #f9a03f
#define blu  #81a2be
#define bblu #2a8fed
#define mag  #b294bb
#define bmag #bc77a8
#define cyn  #8abeb7
#define bcyn #a3685a
#define wht  #c5c8c6
#define bwht #ffffff
#define bg blk
#define fg wht

,*.foreground:  fg
,*.background:  bg
,*.cursorColor: mag

,*.color0:  blk
,*.color8:  bblk
,*.color1:  red
,*.color9:  bred
,*.color2:  grn
,*.color10: bgrn
,*.color3:  ylw
,*.color11: bylw
,*.color4:  blu
,*.color12: bblu
,*.color5:  mag
,*.color13: bmag
,*.color6:  cyn
,*.color14: bcyn
,*.color7:  wht
,*.color15: bwht

! greys
,*.color234: #1d2021
,*.color235: #282828
,*.color236: #32302f
,*.color237: #3c3836
,*.color239: #504945
,*.color240: #544c49
,*.color241: #665c54

!! cursor
Xcursor.theme: default
Xcursor.size: 32
#+END_SRC

*** urxvt
The configuration of urxvt originates from ~hlissners~ setup as well.
#+NAME: xresources-urxvt
#+BEGIN_SRC sh
!! urxvt
URxvt*.background:             [96]blk
URxvt*.termName:               xterm-256color
URxvt*.geometry:               81x20
URxvt*.buffered:               true
URxvt*.cursorBlink:            true
URxvt*.underlineColor:         grey
URxvt*.depth:                  32
URxvt*.borderless:             1
URxvt.iso14755:                false
URxvt.iso14755_52:             false
URxvt*.internalBorder:         14
URxvt*.scrollBar:              false
URxvt*.saveLines:              5000
URxvt*.loginShell:             false
URxvt*.matcher.button:         1
URxvt*.matcher.rend.0:         Uline Bold fg5
URxvt*.url-launcher:           firefox

URxvt*.lineSpace:              0
URxvt*.letterSpace:            0
URxvt.font: xft:Iosevka Term:style=regular:size=8
URxvt.boldFont: xft:Iosevka Term:style=bold:size=8
#+END_SRC

*** The configuration file
#+BEGIN_SRC text :tangle ~/.Xresources :noweb yes
<<xresources-hidpi>>

<<xresources-colors>>

<<xresources-urxvt>>
#+END_SRC
* bspwm
:PROPERTIES:
:header-args: :mkdirp yes
:END:
** profile

In the configuration section in the arch wiki one can read that:
https://wiki.archlinux.org/index.php/bspwm
#+BEGIN_EXAMPLE
Important: Make sure your environment variable $XDG_CONFIG_HOME is set or your
bspwmrc will not be found
#+END_EXAMPLE

It's therefore important to set this environmental variable.
#+BEGIN_SRC sh :tangle ~/.profile :noweb yes
XDG_CONFIG_HOME="$HOME/.config"
export XDG_CONFIG_HOME
#+END_SRC
** sxkhkdrc

I followed the instructions from the manual and copied over the example
configuration from ~/usr/share/doc/bspwm/examples/sxhkdrc/~.

*** Independent hotkeys

#+BEGIN_SRC sh :tangle ~/.config/sxhkd/sxhkdrc :comments link
#
# wm independent hotkeys
#

# terminal emulator
super + Return
	urxvt
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.config/sxhkd/sxhkdrc :comments link
# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

#+END_SRC

I have changed the application launcher from ~dmenu~ to ~rofi~.
#+BEGIN_SRC sh :tangle ~/.config/sxhkd/sxhkdrc :comments link
super + @space
	rofi -show run -m -1

#+END_SRC

The ~-m~ option switches the behavior of ~rofi~ from the default which is to
show the window in the monitor where the mouse recides.

To the monitor which is in focus.

#+BEGIN_EXAMPLE
-1: the currently focused monitor.

-2: the currently focused window (i.e. rofi will be displayed on top of the focused window).

-3: Position at mouse (overrides the location setting to get normal context menu
behaviour.)

-4: the monitor with the focused window.

-5: the monitor that shows the mouse pointer.
#+END_EXAMPLE

*** Hotkeys
#+BEGIN_SRC sh :tangle ~/.config/sxhkd/sxhkdrc :comments link
#
# bspwm hotkeys
#

# quit bspwm normally
super + alt + Escape
	bspc quit

# close and kill
super + {_,shift + }w
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest node
super + g
	bspc node -s biggest

#+END_SRC

*** State flags

#+BEGIN_SRC sh :tangle ~/.config/sxhkd/sxhkdrc :comments link
#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#+END_SRC

*** Focus and swapping
#+BEGIN_SRC sh :tangle ~/.config/sxhkd/sxhkdrc :comments link
#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous node in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

#+END_SRC

*** Preselect

#+BEGIN_SRC sh :tangle ~/.config/sxhkd/sxhkdrc :comments link
#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#+END_SRC

*** Move/resize
#+BEGIN_SRC sh :tangle ~/.config/sxhkd/sxhkdrc :comments link
#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}
#+END_SRC

** bspwmrc

*** Monitors and desktops
With ~bspwmrc~ it's important that the file is executable. With tangle there are
two different ways of making a tangled file executable
https://orgmode.org/manual/tangle_002dmode.html. I will be using the ~shebang~
argument which will org will make sure to add the shebang and make the file
executable.

#+NAME: bspwm-monitor
#+BEGIN_SRC sh
bspc monitor -d I II III IV V VI VII VIII IX X
#+END_SRC

#+NAME: bspwm-multiple-monitors
#+BEGIN_SRC sh
# bspc monitor DP-1 I II III IV V
# bspc monitor eDP-1 VI VII VIII IX X
bspc monitor 0x00600002 -d I II III IV V
bspc monitor 0x00600004 -d VI VII VIII IX X
#+END_SRC

#+NAME: bspwm-emacs
#+BEGIN_SRC sh
bspc rule -a Emacs split_ratio=0.5 border=off state=fullscreen
#+END_SRC

**** Multiple monitors improved

***** Finding out the monitors with xrandr
Find the primary monitor (this is the built in one in the laptop)
#+BEGIN_SRC sh :results output
xrandr -q | grep primary | grep 'connected'
#+END_SRC

#+RESULTS:
: eDP-1-1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 309mm x 175mm

#+BEGIN_SRC sh :results output
xrandr -q | grep primary | grep 'connected' | cut -d' ' -f1
#+END_SRC

#+RESULTS:
: eDP-1-1

Find the other connected monitors
#+BEGIN_SRC sh :results output
xrandr -q | grep 'connected'
#+END_SRC

#+RESULTS:
: DP-0 disconnected (normal left inverted right x axis y axis)
: DP-1 disconnected (normal left inverted right x axis y axis)
: eDP-1-1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 309mm x 175mm
: DP-1-1 disconnected (normal left inverted right x axis y axis)
: HDMI-1-1 disconnected (normal left inverted right x axis y axis)
: DP-1-1-8 connected 1920x1200+1920+0 (normal left inverted right x axis y axis) 518mm x 324mm
: DP-1-1-1 connected 1920x1200+3840+0 (normal left inverted right x axis y axis) 518mm x 324mm

The problem here is that I find a lot of disconnected monitors. I want to get
rid of those

In the grep manual there is an ~invert~ entry
#+BEGIN_SRC sh :results output
grep --help | grep invert
#+END_SRC

#+RESULTS:
:   -v, --invert-match        select non-matching lines

If I use that then
#+BEGIN_SRC sh :results output
xrandr -q | grep 'connected' | grep -v 'disconnected' | cut -d' ' -f1
#+END_SRC

#+RESULTS:
: eDP-1-1
: DP-1-1-8
: DP-1-1-1

Or use awk https://stackoverflow.com/questions/3548453/negative-matching-using-grep-match-lines-that-do-not-contain-foo
#+BEGIN_SRC sh :results output
xrandr -q | grep 'connected' | awk '!/disconnected/' | cut -d' ' -f1
#+END_SRC

#+RESULTS:
: eDP-1-1
: DP-1-1-8
: DP-1-1-1
***** Finding out the monitors with bspc

I found this post on the matter, [[https://www.reddit.com/r/unixporn/comments/5lxecy/bspwm_with_two_monitors/][bspwm with two monitors]].

This solution evenly distributes the monitors. So with a 3 monitor setup the
workspaces becomes. In this setup there will be 3 monitors per monitor meaning 9
desktops in total.
#+BEGIN_SRC text
i=0
n=`bspc query -M | wc -l`  # count number of lines in bspwm's monitor list
per=$(( 10 / n ))          # number of desktops per monitor
for monitor in `bspc query -M`; do
    bspc monitor $monitor -d `seq $i $(( i + per - 1 ))`
    # seq is end-inclusive; `seq 1 $((1+2))` returns "1 2 3"
    i=$(( i + per ))
done
#+END_SRC

*** Background
I found this post about how to configure feh when using bspwm,
http://profectium.blogspot.com/2016/07/how-to-change-your-desktop-background.html.
I tried to use xinitrc first to set the background but that approach seemed to
have implications when running dual screens.
#+NAME: bspwm-feh
#+BEGIN_SRC sh
feh --bg-scale ~/wallpapers/ghostinshell.jpg
#+END_SRC

*** Status bar
It was recomended in the polybar wiki,
https://github.com/jaagr/polybar/wiki, to add a launch file which could be
called from the ~bspwmrc~.
#+NAME: bspwm-polybar
#+BEGIN_SRC sh
$HOME/.config/polybar/launch.sh
#+END_SRC

*** Mouse control
I want to be able to hide my mouse cursor automatically after a while of non-usage
https://wiki.archlinux.org/index.php/unclutter
#+NAME: bspwm-unclutter
#+BEGIN_SRC sh
unclutter &
#+END_SRC

*** Keyboard control
I want to switch caps lock to ctrl when pressed in conjunction with another key,
and escape when pressed by itself. This functionality is provided by the program
~xcape~.
#+NAME: bspwm-xcape
#+BEGIN_SRC sh
xcape &
#+END_SRC

TODO: an improvement will be to make this conditional. I want to only start
xcape as long as the keyboardio can't be detected that it is plugged in. Cause
in that case this modification is not needed.

*** The configuration
#+BEGIN_SRC sh :tangle ~/.config/bspwm/bspwmrc :shebang "#! /bin/sh" :mkdirp yes :noweb yes
sxhkd &

# <<bspwm-monitor>>
<<bspwm-multiple-monitors>>

bspc config border_width         2
bspc config window_gap          12

bspc config split_ratio          0.52
bspc config borderless_monocle   true
bspc config gapless_monocle      true

bspc rule -a Gimp desktop='^8' state=floating follow=on
bspc rule -a Chromium desktop='^2'
bspc rule -a mplayer2 state=floating
bspc rule -a Kupfer.py focus=on
bspc rule -a Screenkey manage=off

# Special apps
<<bspwm-emacs>>

# feh
<<bspwm-feh>>

# polybar
<<bspwm-polybar>>

# unclutter
<<bspwm-unclutter>>

# xcape
<<bspwm-xcape>>
#+END_SRC
* compton

I have used the example configuration to start with.

** Opacity rules
I have here the example opacity rule from the arch wiki,
https://wiki.archlinux.org/index.php/compton.
#+NAME: compton-urxvt
#+BEGIN_SRC sh
opacity-rule = [
  "90:class_g = 'URxvt' && focused",
  "60:class_g = 'URxvt' && !focused"
];
#+END_SRC

** Shadows
I disabled the shadows. I need to understand better how these shadows work
before I use them.
#+NAME: compton-shadow
#+BEGIN_SRC sh
shadow = false;
shadow-radius = 7;
shadow-offset-x = -7;
shadow-offset-y = -7;
log-level = "warn";
# log-file = "/path/to/your/log/file";
# shadow-opacity = 0.7;
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;
shadow-exclude = [
	"name = 'Notification'",
	"class_g = 'Conky'",
	"class_g ?= 'Notify-osd'",
	"class_g = 'Cairo-clock'",
	"_GTK_FRAME_EXTENTS@:c"
];
# shadow-exclude = "n:e:Notification";
# shadow-exclude-reg = "x10+0+0";
# xinerama-shadow-crop = true;
#+END_SRC

** The configuration
It seems like compton gives emacs some kind of dark frame on the right side,
which dissapears if I go to monocle view and back. Need to investigate that.

#+BEGIN_SRC sh :tangle ~/.config/compton.conf :mkdirp yes :noweb yes
# Shadow
<<compton-shadow>>

# Opacity
inactive-opacity = 0.8;
# active-opacity = 0.8;
frame-opacity = 0.7;
inactive-opacity-override = false;
# inactive-dim = 0.2;
# inactive-dim-fixed = true;
# blur-background = true;
# blur-background-frame = true;
blur-kern = "3x3box";
# blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
# blur-background-fixed = true;
blur-background-exclude = [
	"window_type = 'dock'",
	"window_type = 'desktop'",
	"_GTK_FRAME_EXTENTS@:c"
];
# opacity-rule = [ "80:class_g = 'URxvt'" ];
<<compton-urxvt>>

# Fading
fading = true;
# fade-delta = 30;
fade-in-step = 0.03;
fade-out-step = 0.03;
# no-fading-openclose = true;
# no-fading-destroyed-argb = true;
fade-exclude = [ ];

# Other
backend = "xrender";
mark-wmwin-focused = true;
mark-ovredir-focused = true;
# use-ewmh-active-win = true;
detect-rounded-corners = true;
detect-client-opacity = true;
refresh-rate = 0;
vsync = "none";
# sw-opti = true;
# unredir-if-possible = true;
# unredir-if-possible-delay = 5000;
# unredir-if-possible-exclude = [ ];
focus-exclude = [ "class_g = 'Cairo-clock'" ];
detect-transient = true;
detect-client-leader = true;
invert-color-include = [ ];
# resize-damage = 1;

# GLX backend
# glx-no-stencil = true;
# glx-no-rebind-pixmap = true;
glx-swap-method = "undefined";
# glx-use-gpushader4 = true;
# xrender-sync = true;
# xrender-sync-fence = true;

# Window type settings
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.8; }
  dropdown_menu = { opacity = 0.8; }
};
#+END_SRC
* firefox
** Find the profile directory
Figure out the path to the firefox customization directory
https://medium.com/@Aenon/firefox-hide-native-tabs-and-titlebar-f0b00bdbb88b

#+BEGIN_SRC elisp
(defun my/firefox-profile-directory ()
  (let ((profile-directory '())
        (firefox-path (expand-file-name "~/.mozilla/firefox/")))
    (with-temp-buffer (shell-command (concat "ls " firefox-path) t)
                      (goto-char (point-min))
                      (while (not (eobp))
                          (let ((content (string-trim (thing-at-point 'line))))
                            (if (string-match "default" content)
                                (setq profile-directory (concat firefox-path content))))
                          (forward-line 1)))
    profile-directory))
#+END_SRC

#+RESULTS:
: my/firefox-profile-directory

#+BEGIN_SRC elisp
(concat (my/firefox-profile-directory) "/chrome/userChrome.css")
#+END_SRC

#+RESULTS:
: /home/niklascarlsson/.mozilla/firefox/eeakdoa8.default/chrome/userChrome.css

** The configuration

#+BEGIN_SRC sh :tangle (concat (my/firefox-profile-directory) "/chrome/userChrome.css") :mkdirp yes :noweb yes
/*
 * Do not remove the @namespace line -- it's required for correct functioning
 */
@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"); /* set default namespace to XUL */

/*
 * Hide tab bar, navigation bar and scrollbars
 * !important may be added to force override, but not necessary
 */
#TabsToolbar {visibility: collapse;}
#navigator-toolbox {visibility: collapse;}
#content browser {margin-right: -14px; margin-bottom: -14px;}
#+END_SRC
* polybar

** example

#+BEGIN_SRC sh :tangle ~/.config/polybar/config :mkdirp yes :noweb yes
;==========================================================
;
;
;   ██████╗  ██████╗ ██╗  ██╗   ██╗██████╗  █████╗ ██████╗
;   ██╔══██╗██╔═══██╗██║  ╚██╗ ██╔╝██╔══██╗██╔══██╗██╔══██╗
;   ██████╔╝██║   ██║██║   ╚████╔╝ ██████╔╝███████║██████╔╝
;   ██╔═══╝ ██║   ██║██║    ╚██╔╝  ██╔══██╗██╔══██║██╔══██╗
;   ██║     ╚██████╔╝███████╗██║   ██████╔╝██║  ██║██║  ██║
;   ╚═╝      ╚═════╝ ╚══════╝╚═╝   ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝
;
;
;   To learn more about how to configure Polybar
;   go to https://github.com/jaagr/polybar
;
;   The README contains alot of information
;
;==========================================================

[colors]
;background = ${xrdb:color0:#222}
background = #222
background-alt = #444
;foreground = ${xrdb:color7:#222}
foreground = #dfdfdf
foreground-alt = #555
primary = #ffb52a
secondary = #e60053
alert = #bd2c40

[bar/example]
;monitor = ${env:MONITOR:HDMI-1}
width = 100%
height = 27
;offset-x = 1%
;offset-y = 1%
radius = 6.0
fixed-center = false

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 3
line-color = #f00

border-size = 4
border-color = #00000000

padding-left = 0
padding-right = 2

module-margin-left = 1
module-margin-right = 2

font-0 = fixed:pixelsize=10;1
font-1 = unifont:fontformat=truetype:size=8:antialias=false;0
font-2 = siji:pixelsize=10;1

modules-left = bspwm
modules-center =
modules-right = filesystem xbacklight alsa pulseaudio xkeyboard memory cpu wlan eth battery temperature date powermenu

tray-position = right
tray-padding = 2
;tray-background = #0063ff

;wm-restack = bspwm
;wm-restack = i3

;override-redirect = true

;scroll-up = bspwm-desknext
;scroll-down = bspwm-deskprev

;scroll-up = i3wm-wsnext
;scroll-down = i3wm-wsprev

cursor-click = pointer
cursor-scroll = ns-resize

[module/xwindow]
type = internal/xwindow
label = %title:0:30:...%

[module/xkeyboard]
type = internal/xkeyboard
blacklist-0 = num lock

format-prefix = " "
format-prefix-foreground = ${colors.foreground-alt}
format-prefix-underline = ${colors.secondary}

label-layout = %layout%
label-layout-underline = ${colors.secondary}

label-indicator-padding = 2
label-indicator-margin = 1
label-indicator-background = ${colors.secondary}
label-indicator-underline = ${colors.secondary}

[module/filesystem]
type = internal/fs
interval = 25

mount-0 = /

label-mounted = %{F#0a81f5}%mountpoint%%{F-}: %percentage_used%%
label-unmounted = %mountpoint% not mounted
label-unmounted-foreground = ${colors.foreground-alt}

[module/bspwm]
type = internal/bspwm

label-focused = %index%
label-focused-background = ${colors.background-alt}
label-focused-underline= ${colors.primary}
label-focused-padding = 2

label-occupied = %index%
label-occupied-padding = 2

label-urgent = %index%!
label-urgent-background = ${colors.alert}
label-urgent-padding = 2

label-empty = %index%
label-empty-foreground = ${colors.foreground-alt}
label-empty-padding = 2

; Separator in between workspaces
; label-separator = |

[module/i3]
type = internal/i3
format = <label-state> <label-mode>
index-sort = true
wrapping-scroll = false

; Only show workspaces on the same output as the bar
;pin-workspaces = true

label-mode-padding = 2
label-mode-foreground = #000
label-mode-background = ${colors.primary}

; focused = Active workspace on focused monitor
label-focused = %index%
label-focused-background = ${module/bspwm.label-focused-background}
label-focused-underline = ${module/bspwm.label-focused-underline}
label-focused-padding = ${module/bspwm.label-focused-padding}

; unfocused = Inactive workspace on any monitor
label-unfocused = %index%
label-unfocused-padding = ${module/bspwm.label-occupied-padding}

; visible = Active workspace on unfocused monitor
label-visible = %index%
label-visible-background = ${self.label-focused-background}
label-visible-underline = ${self.label-focused-underline}
label-visible-padding = ${self.label-focused-padding}

; urgent = Workspace with urgency hint set
label-urgent = %index%
label-urgent-background = ${module/bspwm.label-urgent-background}
label-urgent-padding = ${module/bspwm.label-urgent-padding}

; Separator in between workspaces
; label-separator = |


[module/mpd]
type = internal/mpd
format-online = <label-song>  <icon-prev> <icon-stop> <toggle> <icon-next>

icon-prev = 
icon-stop = 
icon-play = 
icon-pause = 
icon-next = 

label-song-maxlen = 25
label-song-ellipsis = true

[module/xbacklight]
type = internal/xbacklight

format = <label> <bar>
label = BL

bar-width = 10
bar-indicator = |
bar-indicator-foreground = #fff
bar-indicator-font = 2
bar-fill = ─
bar-fill-font = 2
bar-fill-foreground = #9f78e1
bar-empty = ─
bar-empty-font = 2
bar-empty-foreground = ${colors.foreground-alt}

[module/backlight-acpi]
inherit = module/xbacklight
type = internal/backlight
card = intel_backlight

[module/cpu]
type = internal/cpu
interval = 2
format-prefix = " "
format-prefix-foreground = ${colors.foreground-alt}
format-underline = #f90000
label = %percentage:2%%

[module/memory]
type = internal/memory
interval = 2
format-prefix = " "
format-prefix-foreground = ${colors.foreground-alt}
format-underline = #4bffdc
label = %percentage_used%%

[module/wlan]
type = internal/network
interface = wlp3s0
interval = 3.0

format-connected = <ramp-signal> <label-connected>
format-connected-underline = #9f78e1
label-connected = %essid%

format-disconnected =
;format-disconnected = <label-disconnected>
;format-disconnected-underline = ${self.format-connected-underline}
;label-disconnected = %ifname% disconnected
;label-disconnected-foreground = ${colors.foreground-alt}

ramp-signal-0 = 
ramp-signal-1 = 
ramp-signal-2 = 
ramp-signal-3 = 
ramp-signal-4 = 
ramp-signal-foreground = ${colors.foreground-alt}

[module/eth]
type = internal/network
interface = net0
interval = 3.0

format-connected-underline = #55aa55
format-connected-prefix = " "
format-connected-prefix-foreground = ${colors.foreground-alt}
label-connected = %local_ip%

format-disconnected =
;format-disconnected = <label-disconnected>
;format-disconnected-underline = ${self.format-connected-underline}
;label-disconnected = %ifname% disconnected
;label-disconnected-foreground = ${colors.foreground-alt}

[module/date]
type = internal/date
interval = 5

date =
date-alt = " %Y-%m-%d"

time = %H:%M
time-alt = %H:%M:%S

format-prefix = 
format-prefix-foreground = ${colors.foreground-alt}
format-underline = #0a6cf5

label = %date% %time%

[module/pulseaudio]
type = internal/pulseaudio

format-volume = <label-volume> <bar-volume>
label-volume = VOL %percentage%%
label-volume-foreground = ${root.foreground}

label-muted = 🔇 muted
label-muted-foreground = #666

bar-volume-width = 10
bar-volume-foreground-0 = #55aa55
bar-volume-foreground-1 = #55aa55
bar-volume-foreground-2 = #55aa55
bar-volume-foreground-3 = #55aa55
bar-volume-foreground-4 = #55aa55
bar-volume-foreground-5 = #f5a70a
bar-volume-foreground-6 = #ff5555
bar-volume-gradient = false
bar-volume-indicator = |
bar-volume-indicator-font = 2
bar-volume-fill = ─
bar-volume-fill-font = 2
bar-volume-empty = ─
bar-volume-empty-font = 2
bar-volume-empty-foreground = ${colors.foreground-alt}

[module/alsa]
type = internal/alsa

format-volume = <label-volume> <bar-volume>
label-volume = VOL
label-volume-foreground = ${root.foreground}

format-muted-prefix = " "
format-muted-foreground = ${colors.foreground-alt}
label-muted = sound muted

bar-volume-width = 10
bar-volume-foreground-0 = #55aa55
bar-volume-foreground-1 = #55aa55
bar-volume-foreground-2 = #55aa55
bar-volume-foreground-3 = #55aa55
bar-volume-foreground-4 = #55aa55
bar-volume-foreground-5 = #f5a70a
bar-volume-foreground-6 = #ff5555
bar-volume-gradient = false
bar-volume-indicator = |
bar-volume-indicator-font = 2
bar-volume-fill = ─
bar-volume-fill-font = 2
bar-volume-empty = ─
bar-volume-empty-font = 2
bar-volume-empty-foreground = ${colors.foreground-alt}

[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98

format-charging = <animation-charging> <label-charging>
format-charging-underline = #ffb52a

format-discharging = <animation-discharging> <label-discharging>
format-discharging-underline = ${self.format-charging-underline}

format-full-prefix = " "
format-full-prefix-foreground = ${colors.foreground-alt}
format-full-underline = ${self.format-charging-underline}

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-foreground = ${colors.foreground-alt}

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-foreground = ${colors.foreground-alt}
animation-charging-framerate = 750

animation-discharging-0 = 
animation-discharging-1 = 
animation-discharging-2 = 
animation-discharging-foreground = ${colors.foreground-alt}
animation-discharging-framerate = 750

[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 60

format = <ramp> <label>
format-underline = #f50a4d
format-warn = <ramp> <label-warn>
format-warn-underline = ${self.format-underline}

label = %temperature-c%
label-warn = %temperature-c%
label-warn-foreground = ${colors.secondary}

ramp-0 = 
ramp-1 = 
ramp-2 = 
ramp-foreground = ${colors.foreground-alt}

[module/powermenu]
type = custom/menu

expand-right = true

format-spacing = 1

label-open = 
label-open-foreground = ${colors.secondary}
label-close =  cancel
label-close-foreground = ${colors.secondary}
label-separator = |
label-separator-foreground = ${colors.foreground-alt}

menu-0-0 = reboot
menu-0-0-exec = menu-open-1
menu-0-1 = power off
menu-0-1-exec = menu-open-2

menu-1-0 = cancel
menu-1-0-exec = menu-open-0
menu-1-1 = reboot
menu-1-1-exec = sudo reboot

menu-2-0 = power off
menu-2-0-exec = sudo poweroff
menu-2-1 = cancel
menu-2-1-exec = menu-open-0

[settings]
screenchange-reload = true
;compositing-background = xor
;compositing-background = screen
;compositing-foreground = source
;compositing-border = over
;pseudo-transparency = false

[global/wm]
margin-top = 5
margin-bottom = 5

; vim:ft=dosini

#+END_SRC
* rofi

~rofi~ is a an application launcher.

I have used the configuration of ~Matt Dobson~.
#+BEGIN_SRC sh :tangle ~/.config/rofi/config
! ------------------------------------------------------------------------------
!                          ROFI THEME - MATT DOBSON
! ------------------------------------------------------------------------------
rofi.color-window: argb:f2171717, #535c5c,         #a4a4a4
rofi.color-normal: argb:00171717, #a4a4a4, argb:00535c5c, argb:00171717, #535c5c
rofi.color-urgent: argb:00171717, #cc6666, argb:e54b5160, argb:00171717, #535c5c
rofi.color-active: argb:00171717, #65acff, argb:e44b5160, argb:00171717, #535c5c
rofi.width: 1000
rofi.lines: 15
rofi.font: hack 12
rofi.bw: 0
rofi.padding: 50
rofi.line-margin: 5
rofi.eh: 1
rofi.sidebar-mode: true
rofi.separator-style: none
rofi.hide-scrollbar: true
rofi.show-icons: false
rofi.location: 0
!rofi.modi: window,run,drun
rofi.modi: window,run
rofi.matching: fuzzy

#+END_SRC

* tmux

** Start
#+BEGIN_SRC sh :tangle ~/.tmux.conf :mkdirp yes :comments link
# # -- GENERAL -----------------------------

# set -g default-terminal screen-256color
# set -g default-command $SHELL
# # Prevent double-execution of profile, $SHELL needs to be explicitly in profile
# # though
# set -g default-shell /bin/sh
# set -s focus-events on
# # increase scrollback buffer size
# set -g history-limit 10000

# # Rather than constraining window size to the maximum size of any client
# # connected to the *session*, constrain window size to the maximum size of any
# # client connected to *that window*. Much more reasonable.
# setw -g aggressive-resize off

# # Tmux >= 2.1
# # enable mouse
# setw -g mouse on
# # fix mouse scrolling: enter copy mode on scroll-up, exits it when scrolled to bottom
# bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# # For tmux <2.2
# # UTF-8
# #set -q -g status-utf8 on
# #setw -q -g utf8 on
# # Enable mouse
# #setw -g mode-mouse on
# #set -g mouse-resize-pane on
# #set -g mouse-select-pane on
# #set -g mouse-select-window on


# # -- DISPLAY -----------------------------

# set -g set-titles on
# set -g set-titles-string "tmux [#H] #S:#W:#T"

# # Zero-based indexing is fine in programming languages, but not so much in a multiplexer
# # when zero is on the other side of the keyboard.
# set -g base-index 1
# setw -g pane-base-index 1

# setw -g automatic-rename on # rename window to reflect current program
# set -g renumber-windows on  # renumber windows when a window is closed
# # display tmux messages longer
# set -g display-time 1500
# set -g display-panes-time 800

# # focus events enabled for terminals that support them
# set -g focus-events on


#+END_SRC

** Keybindings
#+BEGIN_SRC sh :tangle ~/.tmux.conf :mkdirp yes :comments link
# # -- KEYBINDS ----------------------------

# set vi keys
setw -g mode-keys vi

# setw -g xterm-keys on
#+END_SRC

When I started using tmux I had a delay in zsh and in tmux there was a
noticable delay as well. This article describes how to deal with it by seting
the ~escape-time~ parameter.
https://www.johnhawthorn.com/2012/09/vi-escape-delays/
#+BEGIN_SRC sh :tangle ~/.tmux.conf :mkdirp yes :comments link
set -s escape-time 0
# set -sg repeat-time 600

#+END_SRC

#+BEGIN_SRC sh :tangle ~/.tmux.conf :mkdirp yes :comments link
# # Custom prefix
set -g prefix C-c
bind C-c send-prefix

unbind C-b

#+END_SRC

*** Rest
#+BEGIN_SRC sh :tangle ~/.tmux.conf :mkdirp yes :comments link
# ## Pane management
# # Saner splitting commands
# unbind %
# unbind '"'
# bind s split-window -c "#{pane_current_path}" -v
# bind v split-window -c "#{pane_current_path}" -h
# bind c new-window -c "#{pane_current_path}"

# # break pane into a window
# bind = select-layout even-vertical
# bind + select-layout even-horizontal
# bind - break-pane
# bind _ join-pane

# # reload config without killing server
# bind r source-file $TMUX_HOME/tmux.conf \; display-message "  Config reloaded..".
# bind ^r refresh-client

# # Smart pane switching with awareness of vim splits
# # See: https://github.com/christoomey/vim-tmux-navigator
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# bind C-w last-pane
# bind C-n next-window
# bind C-p previous-window

# # Pane resizing
# bind C-h resize-pane -L 6
# bind C-j resize-pane -D 6
# bind C-k resize-pane -U 6
# bind C-l resize-pane -R 6
# bind -n M-h resize-pane -L 6
# bind -n M-j resize-pane -D 6
# bind -n M-k resize-pane -U 6
# bind -n M-l resize-pane -R 6

# # Swap panes directionally
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R
# bind H run '$TMUX_HOME/scripts/swap-pane left'
# bind J run '$TMUX_HOME/scripts/swap-pane down'
# bind K run '$TMUX_HOME/scripts/swap-pane up'
# bind L run '$TMUX_HOME/scripts/swap-pane right'
# bind M run '$TMUX_HOME/scripts/swap-pane master'

# bind o resize-pane -Z
# bind S choose-session
# bind W choose-window
# bind / choose-session
# bind . choose-window

# bind n run 'TMUX= tmux new-session -t "$(basename \"$PWD\")" -d \; switch-client -t "$(basename \"$PWD\")"'
# bind N run 'TMUX= tmux new-session -t "$(tmux display-message -p #S)" -s "$(tmux display-message -p #S-clone)" -d \; switch-client -n \; display-message "session #S cloned"'

# # bind = select-layout tiled
# bind | select-layout even-horizontal
# bind _ select-layout even-vertical

# # switch between sessions
# bind -r [ switch-client -p
# bind -r ] switch-client -n

# # Disable confirmation
# bind x kill-pane
# bind X kill-window
# bind q kill-session
# bind Q kill-server
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.tmux.conf :mkdirp yes :comments link
# # -- COPY MODE ---------------------------

# bind Enter copy-mode # enter copy mode
# bind b list-buffers  # list paster buffers
# bind p paste-buffer  # paste from the top pate buffer
# bind P choose-buffer # choose which buffer to paste from

# bind -T copy-mode-vi v send -X begin-selection
# bind -T copy-mode-vi C-v send -X rectangle-toggle
# bind -T copy-mode-vi y send -X copy-selection
# bind -T copy-mode-vi Escape send -X cancel
# bind -T copy-mode-vi H send -X start-of-line
# bind -T copy-mode-vi L send -X end-of-line

#+END_SRC

#+BEGIN_SRC sh :tangle ~/.tmux.conf :mkdirp yes :comments link
# # -- CUSTOM ------------------------------

# if '[[ $OSTYPE == darwin* ]]' 'source $TMUX_HOME/tmux.macos.conf'
# source "$TMUX_HOME/tmux.theme.conf"  # looks

# # Support user overrides
# if '[ -f ~/.tmux.conf ]' 'source ~/.tmux.conf'

# # Plugins
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-copycat'
# set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'tmux-plugins/tmux-open'
# set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# set -g @prefix_highlight_fg colour4
# set -g @prefix_highlight_output_suffix ' #[bg=colour8] '

# # Start plugin manager
# run '$TMUX_PLUGINS_HOME/tpm/tpm'

#+END_SRC

* i3lock

I am using the application ~i3lock~ for locking the screen. I create an
executable file to be able to call it from ~rofi~ passing the right parameters.

#+BEGIN_SRC sh :tangle ~/bin/lock-screen :shebang "#! /bin/sh" :mkdirp yes
i3lock -i ~/opensource/dotfiles/assets/ghostinshell.png --color=000000 -t
#+END_SRC

* shells
** bash
*** default
This is the default content that where in the rc file at start
#+NAME: bashrc-default
#+BEGIN_SRC sh
#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'
PS1='[\u@\h \W]\$ '
#+END_SRC

*** external harddrive
Mount external
#+NAME: bashrc-mount-ssd
#+BEGIN_SRC sh
# mount ssd
alias mountssd='sudo ldm -d -u niklascarlsson'
#+END_SRC

*** The configuration file
Create the file
#+BEGIN_SRC sh :tangle ~/.bashrc :mkdirp yes :noweb yes
<<bashrc-default>>

<<bashrc-mount-ssd>>
#+END_SRC
** zsh

*** zgen

Following the setup details on [[https://github.com/tarjoilija/zgen][zgen wiki]]. Starting with sourcing zgen on start
in zshrc.

#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes :comments link
# load zgen
source "${HOME}/.zgen/zgen.zsh"
#+END_SRC

Further down on the github page there is an example zshrc. I have taken that
content and slimmed it down.
#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes :comments link
# if the init scipt doesn't exist
if ! zgen saved; then
    echo "Creating a zgen save"

    # plugins
    zgen load zsh-users/zsh-syntax-highlighting
    zgen load hlissner/zsh-autopair autopair.zsh develop
    zgen load zsh-users/zsh-history-substring-search
    zgen load zdharma/history-search-multi-word
    zgen load zsh-users/zsh-completions src
    zgen load zsh-users/zsh-autosuggestions

    # save all to init script
    zgen save
fi
#+END_SRC

*** keybindings

Make sure to set the timeout to a low value to avoid delays when pressing escape
https://www.johnhawthorn.com/2012/09/vi-escape-delays/
#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes :comments link
export KEYTIMEOUT=10
#+END_SRC

Enable vi-mode and set the keybindings
I grabbed this from https://github.com/hlissner/dotfiles/tree/master/shell/zsh
#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes :comments link
## vi-mode
bindkey -v

bindkey -M viins '^n' history-substring-search-down
bindkey -M viins '^p' history-substring-search-up
bindkey -M viins '^s' history-incremental-pattern-search-backward
bindkey -M viins '^u' backward-kill-line
bindkey -M viins '^w' backward-kill-word
bindkey -M viins '^b' backward-word
bindkey -M viins '^f' forward-word
bindkey -M viins '^g' push-line-or-edit
bindkey -M viins '^a' beginning-of-line
bindkey -M viins '^e' end-of-line
bindkey -M viins '^d' push-line-or-edit

bindkey -M vicmd '^k' kill-line
bindkey -M vicmd 'H'  run-help

# Shift + Tab
bindkey -M viins '^[[Z' reverse-menu-complete
#+END_SRC

There is an example zshrc found in the arch wiki
https://github.com/MrElendig/dotfiles-alice/blob/master/.zshrc

I use this to get colored directories
#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes :comments link
#------------------------------
# History stuff
#------------------------------
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

#------------------------------
# Variables
#------------------------------
export BROWSER="firefox"
export EDITOR="nvim"
#+END_SRC

I found this set in the arch ~bashrc~ file. Seems like a good alias to set, this
gave me colored output of my ls commands.
#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes :comments link
alias ls='ls --color=auto'
#+END_SRC
*** prompt

https://github.com/hlissner/dotfiles/blob/master/shell/zsh/prompt.zsh

#+BEGIN_SRC sh :tangle ~/.zshrc :mkdirp yes :comments link
# Loosely based off Pure <https://github.com/sindresorhus/pure>

_strlen() { echo ${#${(S%%)1//$~%([BSUbfksu]|([FB]|){*})/}}; }

# fastest possible way to check if repo is dirty
prompt_git_dirty() {

  # check if we're in a git repo
  [[ "$(command git rev-parse --is-inside-work-tree 2>/dev/null)" == "true" ]] || return
  # check if it's dirty
  command test -n "$(git status --porcelain --ignore-submodules -unormal)" || return

  local r=$(command git rev-list --right-only --count HEAD...@'{u}' 2>/dev/null)
  local l=$(command git rev-list --left-only --count HEAD...@'{u}' 2>/dev/null)

  (( ${r:-0} > 0 )) && echo -n " %F{red}${r}-"
  (( ${l:-0} > 0 )) && echo -n " %F{green}${l}+"
  echo -n '%f'
}

## Hooks ###############################
prompt_hook_precmd() {
  vcs_info # get git info
  # Newline before prompt, except on init
  [[ -n $PROMPT_DONE ]] && print ""; PROMPT_DONE=1
}

## Initialization ######################
prompt_init() {
  # prevent the extra space in the rprompt
  [[ -n $EMACS ]] || ZLE_RPROMPT_INDENT=0
  # prevent percentage showing up
  # if output doesn't end with a newline
  export PROMPT_EOL_MARK=

  # prompt_opts=(cr subst percent)
  setopt promptsubst
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  add-zsh-hook precmd prompt_hook_precmd
  # Updates cursor shape and prompt symbol based on vim mode
  zle-keymap-select() {
    case $KEYMAP in
      vicmd)      PROMPT_SYMBOL="%F{magenta}« " ;;
      main|viins) PROMPT_SYMBOL="%(?.%F{green}.%F{red})λ " ;;
    esac
    zle reset-prompt
    zle -R
  }
  zle -N zle-keymap-select
  zle -A zle-keymap-select zle-line-init

  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:*' use-simple true
  zstyle ':vcs_info:*' max-exports 2
  zstyle ':vcs_info:git*' formats ' %b'
  zstyle ':vcs_info:git*' actionformats ' %b (%a)'

  RPROMPT='%F{blue}%~%F{magenta}${vcs_info_msg_0_}$(prompt_git_dirty)%f'
  PROMPT='%F{blue}${prompt_username}%f${PROMPT_SYMBOL:-$ }'
}

prompt_init "$@"
#+END_SRC

**** TODO Make zsh prompt look good in tty as well

The prompt doesn't look that good when in the tty. Should I use
something else then lambda when in such a console with a restricted font.

This is a solution for how to detect if the shell is running in a virtual terminal
https://unix.stackexchange.com/questions/96463/detect-if-running-in-a-virtual-terminal


*** environment variables

https://github.com/hlissner/dotfiles/blob/master/shell/zsh/.zshenv
I found this setting sane. This turned out to not be such a good idea. I was
getting a very weird looking prompt. Removing this setting solved it so that zsh
looks good when used as main shell.
#+BEGIN_SRC sh :tangle ~/.zshenv :mkdirp yes :comments link
# disable global zsh config
# unsetopt GLOBAL_RCS

#+END_SRC
